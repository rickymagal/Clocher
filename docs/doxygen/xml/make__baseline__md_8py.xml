<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="make__baseline__md_8py" kind="file" language="Python">
    <compoundname>make_baseline_md.py</compoundname>
    <innernamespace refid="namespacemake__baseline__md">make_baseline_md</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacemake__baseline__md" refkind="compound"><highlight class="comment">#!/usr/bin/env<sp/>python3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">Create<sp/>a<sp/>Markdown<sp/>baseline<sp/>report<sp/>from<sp/>the<sp/>latest<sp/>benchmarks<sp/>report<sp/>directory.</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">-<sp/>Finds<sp/>the<sp/>newest<sp/>folder<sp/>under<sp/>benchmarks/reports/&lt;timestamp&gt;/</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">-<sp/>Reads<sp/>summary.json<sp/>and<sp/>samples.csv</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">-<sp/>Prints<sp/>BASELINE.md<sp/>to<sp/>stdout<sp/>(so<sp/>you<sp/>can<sp/>redirect<sp/>to<sp/>the<sp/>file)</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>annotations</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>csv</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>json</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pathlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Path</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="namespacemake__baseline__md_1a934d8f8b7e3dd8b9d7e121df6ac93d4d" refkind="member"><highlight class="normal">ROOT<sp/>=<sp/>Path(__file__).resolve().parents[1]</highlight></codeline>
<codeline lineno="16" refid="namespacemake__baseline__md_1aa53d9819cf378e7fd3ba52d5a5f48926" refkind="member"><highlight class="normal">REPORTS_DIR<sp/>=<sp/>ROOT<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;benchmarks&quot;</highlight><highlight class="normal"><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;reports&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="namespacemake__baseline__md_1a5160c0308186e0023cc54bdf5b53ecd0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemake__baseline__md_1a5160c0308186e0023cc54bdf5b53ecd0" kindref="member">newest_report_dir</ref>()<sp/>-&gt;<sp/>Path:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>candidates<sp/>=<sp/>[p<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>REPORTS_DIR.glob(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>p.is_dir()]</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>candidates:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>SystemExit(</highlight><highlight class="stringliteral">&quot;No<sp/>report<sp/>directories<sp/>found.<sp/>Run<sp/>`make<sp/>bench`<sp/>first.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sorted(candidates)[-1]</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespacemake__baseline__md_1aeb37a8c1de65989aec4ce9d92f112ed6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemake__baseline__md_1aeb37a8c1de65989aec4ce9d92f112ed6" kindref="member">read_summary</ref>(d:<sp/>Path)<sp/>-&gt;<sp/>dict:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>d<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;summary.json&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>json.loads(s.read_text(encoding=</highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="namespacemake__baseline__md_1ae69e0e5bb3636b0548dd22d6b8fcb7ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemake__baseline__md_1ae69e0e5bb3636b0548dd22d6b8fcb7ad" kindref="member">read_samples</ref>(d:<sp/>Path)<sp/>-&gt;<sp/>list[dict]:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>(d<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;samples.csv&quot;</highlight><highlight class="normal">).open(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>encoding=</highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">,<sp/>newline=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>f:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>row<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>csv.DictReader(f):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows.append(row)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rows</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespacemake__baseline__md_1a596060d7591b8d65a500867ee80aceb7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacemake__baseline__md_1a596060d7591b8d65a500867ee80aceb7" kindref="member">main</ref>()<sp/>-&gt;<sp/>int:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/><ref refid="namespacemake__baseline__md_1a5160c0308186e0023cc54bdf5b53ecd0" kindref="member">newest_report_dir</ref>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>summary<sp/>=<sp/><ref refid="namespacemake__baseline__md_1aeb37a8c1de65989aec4ce9d92f112ed6" kindref="member">read_summary</ref>(d)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>samples<sp/>=<sp/><ref refid="namespacemake__baseline__md_1ae69e0e5bb3636b0548dd22d6b8fcb7ad" kindref="member">read_samples</ref>(d)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Derive<sp/>p50/p95<sp/>from<sp/>samples<sp/>if<sp/>available<sp/>per-token<sp/>latency;<sp/>otherwise<sp/>use<sp/>CLI<sp/>metrics<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Our<sp/>samples.csv<sp/>contains<sp/>engine<sp/>metrics<sp/>per<sp/>run<sp/>line,<sp/>not<sp/>per-token.<sp/>We&apos;ll<sp/>show<sp/>means.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>p50s<sp/>=<sp/>[float(r.get(</highlight><highlight class="stringliteral">&quot;latency_p50_ms&quot;</highlight><highlight class="normal">,<sp/>0.0))<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>samples]</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>p95s<sp/>=<sp/>[float(r.get(</highlight><highlight class="stringliteral">&quot;latency_p95_ms&quot;</highlight><highlight class="normal">,<sp/>0.0))<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>samples]</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>mean_p50<sp/>=<sp/>sum(p50s)<sp/>/<sp/>len(p50s)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>p50s<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>0.0</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>mean_p95<sp/>=<sp/>sum(p95s)<sp/>/<sp/>len(p95s)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>p95s<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>0.0</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>md<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;#<sp/>Baseline<sp/>Report<sp/>—<sp/>{d.name}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;##<sp/>Summary&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;-<sp/>**Avg<sp/>True<sp/>TPS<sp/>(harness)**:<sp/>{summary.get(&apos;avg_tps_true&apos;,<sp/>0.0):.2f}<sp/>tok/s&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;-<sp/>**Total<sp/>tokens**:<sp/>{int(summary.get(&apos;total_tokens&apos;,<sp/>0))}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;-<sp/>**Runs<sp/>(samples)**:<sp/>{int(summary.get(&apos;samples&apos;,<sp/>0))}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;-<sp/>**Mean<sp/>p50<sp/>latency**:<sp/>{mean_p50:.3f}<sp/>ms&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;-<sp/>**Mean<sp/>p95<sp/>latency**:<sp/>{mean_p95:.3f}<sp/>ms&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;##<sp/>Engine/Build<sp/>flags&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;-<sp/>Precision:<sp/>`fp32`<sp/>(baseline)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;-<sp/>Threads:<sp/>`auto`<sp/>(baseline<sp/>stub)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;-<sp/>Affinity:<sp/>`auto`<sp/>(baseline<sp/>stub)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;##<sp/>Observations&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;-<sp/>Replace<sp/>dummy<sp/>wait<sp/>with<sp/>real<sp/>FP32<sp/>math<sp/>✅&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;-<sp/>Latency<sp/>is<sp/>measured<sp/>per<sp/>token;<sp/>p50/p95<sp/>reported<sp/>by<sp/>CLI;<sp/>harness<sp/>computes<sp/>True<sp/>TPS.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;-<sp/>Next<sp/>steps:<sp/>profile<sp/>flamegraph,<sp/>identify<sp/>hotspots<sp/>(gemv_rowmajor,<sp/>embed_token,<sp/>tanhf),<sp/>plan<sp/>AVX2<sp/>kernels,<sp/>threading.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;##<sp/>Raw<sp/>files&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;-<sp/>`samples.csv`<sp/>—<sp/>{d<sp/>/<sp/>&apos;samples.csv&apos;}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>md.append(f</highlight><highlight class="stringliteral">&quot;-<sp/>`summary.json`<sp/>—<sp/>{d<sp/>/<sp/>&apos;summary.json&apos;<sp/>}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">.join(md))</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>SystemExit(<ref refid="namespacemake__baseline__md_1a596060d7591b8d65a500867ee80aceb7" kindref="member">main</ref>())</highlight></codeline>
    </programlisting>
    <location file="scripts/make_baseline_md.py"/>
  </compounddef>
</doxygen>
