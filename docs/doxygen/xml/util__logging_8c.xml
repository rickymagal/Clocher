<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="util__logging_8c" kind="file" language="C++">
    <compoundname>util_logging.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdarg.h</includes>
    <incdepgraph>
      <node id="1">
        <label>engine/src/util_logging.c</label>
        <link refid="util__logging_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int g_log_level</definition>
        <argsstring></argsstring>
        <name>g_log_level</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Global log level (0=quiet, 1=info, 2=debug). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/util_logging.c" line="15" column="12" bodyfile="engine/src/util_logging.c" bodystart="15" bodyend="-1"/>
        <referencedby refid="util__logging_8c_1a93ac090972e03301dc5a4614ac79ca5e" compoundref="util__logging_8c" startline="42" endline="49">ie_log_debug</referencedby>
        <referencedby refid="util__logging_8h_1a7bff220c76442d1372d81e26f77c2921" compoundref="util__logging_8c" startline="28" endline="35">ie_log_info</referencedby>
        <referencedby refid="util__logging_8c_1a83c370e57a4bb7f2b7c67504d92ccb51" compoundref="util__logging_8c" startline="21" endline="21">ie_log_set_level</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="util__logging_8c_1a83c370e57a4bb7f2b7c67504d92ccb51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_log_set_level</definition>
        <argsstring>(int lvl)</argsstring>
        <name>ie_log_set_level</name>
        <param>
          <type>int</type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
<para>Set the global log verbosity level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lvl</parametername>
</parameternamelist>
<parameterdescription>
<para>0=quiet, 1=info, 2=debug. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/util_logging.c" line="21" column="6" bodyfile="engine/src/util_logging.c" bodystart="21" bodyend="21"/>
        <references refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" compoundref="util__logging_8c" startline="15">g_log_level</references>
      </memberdef>
      <memberdef kind="function" id="util__logging_8c_1a7bff220c76442d1372d81e26f77c2921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_log_info</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>ie_log_info</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Emit an informational log line to stderr if level &gt;= 1. </para>
        </briefdescription>
        <detaileddescription>
<para>Log an informational message (printf-style).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/util_logging.c" line="28" column="6" bodyfile="engine/src/util_logging.c" bodystart="28" bodyend="35"/>
        <references refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" compoundref="util__logging_8c" startline="15">g_log_level</references>
      </memberdef>
      <memberdef kind="function" id="util__logging_8c_1a93ac090972e03301dc5a4614ac79ca5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_log_debug</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>ie_log_debug</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Emit a debug log line to stderr if level &gt;= 2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variadic arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/util_logging.c" line="42" column="6" bodyfile="engine/src/util_logging.c" bodystart="42" bodyend="49"/>
        <references refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" compoundref="util__logging_8c" startline="15">g_log_level</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Minimal logging helpers (baseline). </para>
    </briefdescription>
    <detaileddescription>
<para>Provides leveled logging to stderr. Levels: 0 = quiet, 1 = info, 2 = debug.</para>
<para>This module is intentionally tiny and dependency-free. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" kindref="member">g_log_level</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="util__logging_8c_1a83c370e57a4bb7f2b7c67504d92ccb51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util__logging_8c_1a83c370e57a4bb7f2b7c67504d92ccb51" kindref="member">ie_log_set_level</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lvl)<sp/>{<sp/><ref refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" kindref="member">g_log_level</ref><sp/>=<sp/>lvl;<sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="util__logging_8h_1a7bff220c76442d1372d81e26f77c2921" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util__logging_8c_1a7bff220c76442d1372d81e26f77c2921" kindref="member">ie_log_info</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" kindref="member">g_log_level</ref><sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;<sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[info]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>vfprintf(stderr,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="util__logging_8c_1a93ac090972e03301dc5a4614ac79ca5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util__logging_8c_1a93ac090972e03301dc5a4614ac79ca5e" kindref="member">ie_log_debug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util__logging_8c_1ab80060ad0a06923e07f013630c67e2b1" kindref="member">g_log_level</ref><sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;<sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[debug]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>vfprintf(stderr,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="engine/src/util_logging.c"/>
  </compounddef>
</doxygen>
