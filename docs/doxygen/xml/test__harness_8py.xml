<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__harness_8py" kind="file" language="Python">
    <compoundname>test_harness.py</compoundname>
    <innerclass refid="classtest__harness_1_1HarnessTests" prot="public">test_harness::HarnessTests</innerclass>
    <innernamespace refid="namespacetest__harness">test_harness</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetest__harness" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Harness<sp/>smoke<sp/>tests<sp/>(stdlib-only).</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">This<sp/>test<sp/>runs<sp/>the<sp/>benchmark<sp/>harness<sp/>as<sp/>a<sp/>subprocess<sp/>to<sp/>avoid<sp/>importing<sp/>it</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">as<sp/>a<sp/>package<sp/>(no<sp/>third-party<sp/>deps,<sp/>no<sp/>__init__.py<sp/>required).<sp/>It<sp/>then<sp/>checks</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">that<sp/>a<sp/>new<sp/>report<sp/>directory<sp/>with<sp/>summary.json<sp/>was<sp/>created.</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>json</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>subprocess</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pathlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Path</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="classtest__harness_1_1HarnessTests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__harness_1_1HarnessTests" kindref="compound">HarnessTests</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="17" refid="classtest__harness_1_1HarnessTests_1a8b2c362d6871462cfeb60faa9c060605" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__harness_1_1HarnessTests_1a8b2c362d6871462cfeb60faa9c060605" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="18" refid="classtest__harness_1_1HarnessTests_1a9da2a077c2a49eecb0e669c6f56dc0b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__harness_1_1HarnessTests_1a9da2a077c2a49eecb0e669c6f56dc0b3" kindref="member">repo_root</ref><sp/>=<sp/>Path(__file__).resolve().parents[2]</highlight></codeline>
<codeline lineno="19" refid="classtest__harness_1_1HarnessTests_1a9f8c8174f3487e8fa0d6b79cff5fb4a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__harness_1_1HarnessTests_1a9f8c8174f3487e8fa0d6b79cff5fb4a1" kindref="member">bin_path</ref><sp/>=<sp/>self.<ref refid="classtest__harness_1_1HarnessTests_1a9da2a077c2a49eecb0e669c6f56dc0b3" kindref="member">repo_root</ref><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;build&quot;</highlight><highlight class="normal"><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;inference-engine&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="classtest__harness_1_1HarnessTests_1af576dc895342c5c62354e833eb8ad029" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__harness_1_1HarnessTests_1af576dc895342c5c62354e833eb8ad029" kindref="member">reports_dir</ref><sp/>=<sp/>self.<ref refid="classtest__harness_1_1HarnessTests_1a9da2a077c2a49eecb0e669c6f56dc0b3" kindref="member">repo_root</ref><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;benchmarks&quot;</highlight><highlight class="normal"><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;reports&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classtest__harness_1_1HarnessTests_1a2eef3a4320486a0599659fc74a51c975" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__harness_1_1HarnessTests_1a2eef3a4320486a0599659fc74a51c975" kindref="member">harness_script</ref><sp/>=<sp/>self.<ref refid="classtest__harness_1_1HarnessTests_1a9da2a077c2a49eecb0e669c6f56dc0b3" kindref="member">repo_root</ref><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;benchmarks&quot;</highlight><highlight class="normal"><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;harness.py&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classtest__harness_1_1HarnessTests_1aa0434e356ad823b1374571844b39c87c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__harness_1_1HarnessTests_1aa0434e356ad823b1374571844b39c87c" kindref="member">test_harness_generates_reports</ref>(self):</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Preconditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.<ref refid="classtest__harness_1_1HarnessTests_1a9f8c8174f3487e8fa0d6b79cff5fb4a1" kindref="member">bin_path</ref>.exists(),<sp/>msg=</highlight><highlight class="stringliteral">&quot;Binary<sp/>not<sp/>found.<sp/>Run:<sp/>make<sp/>build&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.<ref refid="classtest__harness_1_1HarnessTests_1a2eef3a4320486a0599659fc74a51c975" kindref="member">harness_script</ref>.exists(),<sp/>msg=</highlight><highlight class="stringliteral">&quot;Missing<sp/>benchmarks/harness.py&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Run<sp/>harness<sp/>(writes<sp/>to<sp/>benchmarks/reports/&lt;timestamp&gt;/)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>subprocess.run(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;python3&quot;</highlight><highlight class="normal">,<sp/>str(self.<ref refid="classtest__harness_1_1HarnessTests_1a2eef3a4320486a0599659fc74a51c975" kindref="member">harness_script</ref>)],</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdout=subprocess.PIPE,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stderr=subprocess.PIPE,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Allow<sp/>filesystem<sp/>timestamp<sp/>granularity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.sleep(0.05)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>most<sp/>recent<sp/>summary.json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidates<sp/>=<sp/>sorted(self.<ref refid="classtest__harness_1_1HarnessTests_1af576dc895342c5c62354e833eb8ad029" kindref="member">reports_dir</ref>.glob(</highlight><highlight class="stringliteral">&quot;*/summary.json&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(candidates,<sp/>msg=</highlight><highlight class="stringliteral">&quot;No<sp/>summary.json<sp/>generated<sp/>by<sp/>harness&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>summary_path<sp/>=<sp/>candidates[-1]</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Validate<sp/>summary<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>json.loads(summary_path.read_text(encoding=</highlight><highlight class="stringliteral">&quot;utf-8&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;avg_tps_true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;total_tokens&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;samples&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(key,<sp/>data,<sp/>msg=f</highlight><highlight class="stringliteral">&quot;Missing<sp/>summary<sp/>field:<sp/>{key}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertGreater(data[</highlight><highlight class="stringliteral">&quot;samples&quot;</highlight><highlight class="normal">],<sp/>0)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertGreaterEqual(data[</highlight><highlight class="stringliteral">&quot;total_tokens&quot;</highlight><highlight class="normal">],<sp/>0)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53" refid="namespacetest__harness_1abe133296ca5ec1fcb012b0876b519c8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>unittest.main(verbosity=2)</highlight></codeline>
    </programlisting>
    <location file="tests/python/test_harness.py"/>
  </compounddef>
</doxygen>
