<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__threadpool_8c" kind="file" language="C++">
    <compoundname>test_threadpool.c</compoundname>
    <includes refid="ie__threadpool_8h" local="yes">ie_threadpool.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdbool.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ie_threadpool.h</label>
        <link refid="ie__threadpool_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/c/test_threadpool.c</label>
        <link refid="test__threadpool_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtp__ctx__t" prot="public">tp_ctx_t</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__threadpool_8c_1a4e8c2bfb066a4e80fce258293a4803ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mark_task</definition>
        <argsstring>(void *ctx, unsigned start, unsigned end)</argsstring>
        <name>mark_task</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Parallel-for body: marks each visited index as 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Inclusive start index of the chunk. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Exclusive end index of the chunk. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_threadpool.c" line="31" column="13" bodyfile="tests/c/test_threadpool.c" bodystart="31" bodyend="38"/>
        <references refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" compoundref="test__threadpool_8c" startline="21">tp_ctx_t::marks</references>
        <references refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" compoundref="test__threadpool_8c" startline="20">tp_ctx_t::N</references>
        <referencedby refid="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__threadpool_8c" startline="69" endline="126">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__threadpool_8c_1ade8fb3f4a5ad7b28c86349aee27663ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool all_marked_once</definition>
        <argsstring>(const tp_ctx_t *c)</argsstring>
        <name>all_marked_once</name>
        <param>
          <type>const <ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Verify that all positions [0, N) were visited exactly once. </para>
        </briefdescription>
        <detaileddescription>
<para>(We ensure all positions are marked as 1; strict “exactly once” with contention detection would need atomics and checking for &gt;1.)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Test context with bitmap. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if every mark[i] == 1 for i in [0, N); false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_threadpool.c" line="49" column="13" bodyfile="tests/c/test_threadpool.c" bodystart="49" bodyend="55"/>
        <references refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" compoundref="test__threadpool_8c" startline="21">tp_ctx_t::marks</references>
        <references refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" compoundref="test__threadpool_8c" startline="20">tp_ctx_t::N</references>
        <referencedby refid="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__threadpool_8c" startline="69" endline="126">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Entry point: runs the thread-pool tests. </para>
        </briefdescription>
        <detaileddescription>
<para>Steps: 1) Single-threaded (tp=NULL) with auto grainsize. 2) Multi-threaded (tp!=NULL) with auto grainsize. 3) Multi-threaded with explicit grainsize.</para>
<para>Prints &quot;ok test_threadpool&quot; on success; exits with nonzero on failure.</para>
<para><simplesect kind="return"><para>0 on success; non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_threadpool.c" line="69" column="5" bodyfile="tests/c/test_threadpool.c" bodystart="69" bodyend="126"/>
        <references refid="test__threadpool_8c_1ade8fb3f4a5ad7b28c86349aee27663ce" compoundref="test__threadpool_8c" startline="49" endline="55">all_marked_once</references>
        <references refid="ie__threadpool_8h_1ac8f8095fb1ec189946232325a3fce3a2" compoundref="thread__pool_8c" startline="115" endline="144">ie_tp_create</references>
        <references refid="ie__threadpool_8h_1ab205aaf0e68cb61f3ac782c02aa5d475" compoundref="thread__pool_8c" startline="146" endline="157">ie_tp_destroy</references>
        <references refid="ie__threadpool_8h_1ac3dd114f8b47a5fe0d22f8107a51e90f" compoundref="thread__pool_8c" startline="194" endline="262">ie_tp_parallel_for</references>
        <references refid="test__threadpool_8c_1a4e8c2bfb066a4e80fce258293a4803ab" compoundref="test__threadpool_8c" startline="31" endline="38">mark_task</references>
        <references refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" compoundref="test__threadpool_8c" startline="21">tp_ctx_t::marks</references>
        <references refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" compoundref="test__threadpool_8c" startline="20">tp_ctx_t::N</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Unit test for <ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref> parallel-for with contiguous partition. </para>
    </briefdescription>
    <detaileddescription>
<para>This test validates:<itemizedlist>
<listitem><para>Single-threaded and multi-threaded execution paths.</para>
</listitem><listitem><para>Full coverage of the iteration space [0, N).</para>
</listitem><listitem><para>No overlaps/missed iterations when grainsize is provided or auto. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__threadpool_8h" kindref="compound">ie_threadpool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structtp__ctx__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20" refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" kindref="member">N</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21" refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal">}<sp/><ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="test__threadpool_8c_1a4e8c2bfb066a4e80fce258293a4803ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__threadpool_8c_1a4e8c2bfb066a4e80fce258293a4803ab" kindref="member">mark_task</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref><sp/>*c<sp/>=<sp/>(<ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref>*)ctx;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c<sp/>||<sp/>!c-&gt;<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>c-&gt;<ref refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" kindref="member">N</ref>)<sp/>end<sp/>=<sp/>c-&gt;<ref refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" kindref="member">N</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start;<sp/>i<sp/>&lt;<sp/>end;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>[i]<sp/>=<sp/>1u;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="test__threadpool_8c_1ade8fb3f4a5ad7b28c86349aee27663ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__threadpool_8c_1ade8fb3f4a5ad7b28c86349aee27663ce" kindref="member">all_marked_once</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref><sp/>*c)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c<sp/>||<sp/>!c-&gt;<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c-&gt;<ref refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" kindref="member">N</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>[i]<sp/>!=<sp/>1u)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>10000u;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>---<sp/>Case<sp/>1:<sp/>single-threaded<sp/>path<sp/>(tp<sp/>==<sp/>NULL)<sp/>---<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref><sp/>c1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>c1.<ref refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" kindref="member">N</ref><sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>c1.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)calloc(N,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c1.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>)<sp/>{<sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;alloc<sp/>failed\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="ie__threadpool_8h_1ac3dd114f8b47a5fe0d22f8107a51e90f" kindref="member">ie_tp_parallel_for</ref>(</highlight><highlight class="comment">/*tp*/</highlight><highlight class="normal">NULL,<sp/></highlight><highlight class="comment">/*n*/</highlight><highlight class="normal">N,<sp/></highlight><highlight class="comment">/*grainsize*/</highlight><highlight class="normal">0,<sp/><ref refid="test__threadpool_8c_1a4e8c2bfb066a4e80fce258293a4803ab" kindref="member">mark_task</ref>,<sp/>&amp;c1);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test__threadpool_8c_1ade8fb3f4a5ad7b28c86349aee27663ce" kindref="member">all_marked_once</ref>(&amp;c1))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;single-threaded<sp/>coverage<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>free(c1.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>free(c1.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>---<sp/>Case<sp/>2:<sp/>multi-threaded<sp/>path<sp/>(tp<sp/>!=<sp/>NULL),<sp/>auto<sp/>grainsize<sp/>---<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref><sp/>*tp<sp/>=<sp/><ref refid="ie__threadpool_8h_1ac8f8095fb1ec189946232325a3fce3a2" kindref="member">ie_tp_create</ref>(</highlight><highlight class="comment">/*nth*/</highlight><highlight class="normal">4,<sp/></highlight><highlight class="comment">/*affinity*/</highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tp)<sp/>{<sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;tp<sp/>create<sp/>failed\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref><sp/>c2;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>c2.<ref refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" kindref="member">N</ref><sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>c2.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)calloc(N,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c2.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>)<sp/>{<sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;alloc<sp/>failed\n&quot;</highlight><highlight class="normal">);<sp/><ref refid="ie__threadpool_8h_1ab205aaf0e68cb61f3ac782c02aa5d475" kindref="member">ie_tp_destroy</ref>(tp);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="ie__threadpool_8h_1ac3dd114f8b47a5fe0d22f8107a51e90f" kindref="member">ie_tp_parallel_for</ref>(tp,<sp/>N,<sp/></highlight><highlight class="comment">/*grainsize*/</highlight><highlight class="normal">0,<sp/><ref refid="test__threadpool_8c_1a4e8c2bfb066a4e80fce258293a4803ab" kindref="member">mark_task</ref>,<sp/>&amp;c2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test__threadpool_8c_1ade8fb3f4a5ad7b28c86349aee27663ce" kindref="member">all_marked_once</ref>(&amp;c2))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;multi-threaded<sp/>coverage<sp/>(auto<sp/>grainsize)<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>free(c2.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ie__threadpool_8h_1ab205aaf0e68cb61f3ac782c02aa5d475" kindref="member">ie_tp_destroy</ref>(tp);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>free(c2.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>---<sp/>Case<sp/>3:<sp/>multi-threaded,<sp/>explicit<sp/>grainsize<sp/>(e.g.,<sp/>257)<sp/>---<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="structtp__ctx__t" kindref="compound">tp_ctx_t</ref><sp/>c3;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>c3.<ref refid="structtp__ctx__t_1aa6fbac1cc8db863c595541b8405db24e" kindref="member">N</ref><sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>c3.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">*)calloc(N,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c3.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>)<sp/>{<sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;alloc<sp/>failed\n&quot;</highlight><highlight class="normal">);<sp/><ref refid="ie__threadpool_8h_1ab205aaf0e68cb61f3ac782c02aa5d475" kindref="member">ie_tp_destroy</ref>(tp);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="ie__threadpool_8h_1ac3dd114f8b47a5fe0d22f8107a51e90f" kindref="member">ie_tp_parallel_for</ref>(tp,<sp/>N,<sp/></highlight><highlight class="comment">/*grainsize*/</highlight><highlight class="normal">257u,<sp/><ref refid="test__threadpool_8c_1a4e8c2bfb066a4e80fce258293a4803ab" kindref="member">mark_task</ref>,<sp/>&amp;c3);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test__threadpool_8c_1ade8fb3f4a5ad7b28c86349aee27663ce" kindref="member">all_marked_once</ref>(&amp;c3))<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;multi-threaded<sp/>coverage<sp/>(explicit<sp/>grainsize)<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>free(c3.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ie__threadpool_8h_1ab205aaf0e68cb61f3ac782c02aa5d475" kindref="member">ie_tp_destroy</ref>(tp);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>7;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>free(c3.<ref refid="structtp__ctx__t_1a0f6de00d688ab9a6955ef59986a6f3d3" kindref="member">marks</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="ie__threadpool_8h_1ab205aaf0e68cb61f3ac782c02aa5d475" kindref="member">ie_tp_destroy</ref>(tp);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;ok<sp/>test_threadpool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/c/test_threadpool.c"/>
  </compounddef>
</doxygen>
