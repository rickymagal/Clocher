<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="microbench__gemv_8c" kind="file" language="C++">
    <compoundname>microbench_gemv.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">time.h</includes>
    <incdepgraph>
      <node id="1">
        <label>benchmarks/src/microbench_gemv.c</label>
        <link refid="microbench__gemv_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="microbench__gemv_8c_1a8a295707b83706041868cd34f3c663d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double now_s</definition>
        <argsstring>(void)</argsstring>
        <name>now_s</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Portable timestamp in seconds using C11 timespec_get. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current time as double seconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/src/microbench_gemv.c" line="24" column="15" bodyfile="benchmarks/src/microbench_gemv.c" bodystart="24" bodyend="28"/>
        <referencedby refid="microbench__gemv_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="microbench__gemv_8c" startline="93" endline="155">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_rand</definition>
        <argsstring>(float *p, size_t n, unsigned *seed, float scale)</argsstring>
        <name>init_rand</name>
        <param>
          <type>float *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned *</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Initialize an array with pseudo-random FP32 in [-scale, +scale]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed (modified internally). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Half-range for uniform distribution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/src/microbench_gemv.c" line="37" column="13" bodyfile="benchmarks/src/microbench_gemv.c" bodystart="37" bodyend="43"/>
        <referencedby refid="microbench__gemv_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="microbench__gemv_8c" startline="93" endline="155">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gemv_rowmajor</definition>
        <argsstring>(const float *W, const float *x, float *y, size_t rows, size_t cols)</argsstring>
        <name>gemv_rowmajor</name>
        <param>
          <type>const float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>Row-major GEMV: y = W * x. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights [rows x cols], row-major. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector [cols]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector [rows]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/src/microbench_gemv.c" line="53" column="13" bodyfile="benchmarks/src/microbench_gemv.c" bodystart="53" bodyend="61"/>
        <referencedby refid="microbench__gemv_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="microbench__gemv_8c" startline="93" endline="155">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="microbench__gemv_8c_1a5ad63b621cb6206300427b7af31c3146" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void vec_tanh</definition>
        <argsstring>(float *v, size_t n)</argsstring>
        <name>vec_tanh</name>
        <param>
          <type>float *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Apply tanhf elementwise (in-place). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/src/microbench_gemv.c" line="68" column="13" bodyfile="benchmarks/src/microbench_gemv.c" bodystart="68" bodyend="70"/>
        <referencedby refid="microbench__gemv_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="microbench__gemv_8c" startline="93" endline="155">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="microbench__gemv_8c_1a2a93eb537305385ec2e3839e02c34e06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void embed_token</definition>
        <argsstring>(unsigned tok, float *x, size_t H)</argsstring>
        <name>embed_token</name>
        <param>
          <type>unsigned</type>
          <declname>tok</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>H</declname>
        </param>
        <briefdescription>
<para>Synthesize an embedding from a token id (deterministic). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tok</parametername>
</parameternamelist>
<parameterdescription>
<para>Token id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Output embedding [H]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>H</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/src/microbench_gemv.c" line="78" column="13" bodyfile="benchmarks/src/microbench_gemv.c" bodystart="78" bodyend="85"/>
        <referencedby refid="microbench__gemv_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="microbench__gemv_8c" startline="93" endline="155">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="microbench__gemv_8c_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Entry point: allocate matrices/vectors; time embed+gemv+tanh loops. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>Arg count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>Arg vector: [H] [V] [iters]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="benchmarks/src/microbench_gemv.c" line="93" column="5" bodyfile="benchmarks/src/microbench_gemv.c" bodystart="93" bodyend="155"/>
        <references refid="microbench__gemv_8c_1a2a93eb537305385ec2e3839e02c34e06" compoundref="microbench__gemv_8c" startline="78" endline="85">embed_token</references>
        <references refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" compoundref="microbench__gemv_8c" startline="53" endline="61">gemv_rowmajor</references>
        <references refid="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" compoundref="microbench__gemv_8c" startline="37" endline="43">init_rand</references>
        <references refid="microbench__gemv_8c_1a8a295707b83706041868cd34f3c663d5" compoundref="microbench__gemv_8c" startline="24" endline="28">now_s</references>
        <references refid="microbench__gemv_8c_1a5ad63b621cb6206300427b7af31c3146" compoundref="microbench__gemv_8c" startline="68" endline="70">vec_tanh</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Standalone microbenchmark for GEMV/tanh/embed hotspots (FP32). </para>
    </briefdescription>
    <detaileddescription>
<para>Build via Makefile target <computeroutput>microbench</computeroutput>. Runs timed loops to mimic the decode inner loop and prints plain-text metrics (time and GB/s).</para>
<para>Usage: ./build/microbench_gemv [H] [V] [iters] Defaults: H=256 (hidden), V=1024 (logits), iters=100 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="microbench__gemv_8c_1a8a295707b83706041868cd34f3c663d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="microbench__gemv_8c_1a8a295707b83706041868cd34f3c663d5" kindref="member">now_s</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>ts;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>timespec_get(&amp;ts,<sp/>TIME_UTC);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)ts.tv_sec<sp/>+<sp/>(double)ts.tv_nsec<sp/>/<sp/>1e9;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" kindref="member">init_rand</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*seed,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>*seed<sp/>=<sp/>*seed<sp/>*<sp/>1664525u<sp/>+<sp/>1013904223u;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>(float)((*seed<sp/>&amp;<sp/>0xFFFFFFu)<sp/>/<sp/>16777216.0f);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>(u<sp/>*<sp/>2.0f<sp/>-<sp/>1.0f)<sp/>*<sp/>scale;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" kindref="member">gemv_rowmajor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>rows;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*w<sp/>=<sp/>W<sp/>+<sp/>r<sp/>*<sp/>cols;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>cols;<sp/>++c)<sp/>acc<sp/>+=<sp/>w[c]<sp/>*<sp/>x[c];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>y[r]<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="microbench__gemv_8c_1a5ad63b621cb6206300427b7af31c3146" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="microbench__gemv_8c_1a5ad63b621cb6206300427b7af31c3146" kindref="member">vec_tanh</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>v[i]<sp/>=<sp/>tanhf(v[i]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="microbench__gemv_8c_1a2a93eb537305385ec2e3839e02c34e06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="microbench__gemv_8c_1a2a93eb537305385ec2e3839e02c34e06" kindref="member">embed_token</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>tok,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>H)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0x9E3779B9u<sp/>^<sp/>(tok<sp/>*<sp/>0x85EBCA6Bu);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>H;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>^=<sp/>(s<sp/>&lt;&lt;<sp/>13);<sp/>s<sp/>^=<sp/>(s<sp/>&gt;&gt;<sp/>17);<sp/>s<sp/>^=<sp/>(s<sp/>&lt;&lt;<sp/>5);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(float)(s<sp/>&amp;<sp/>0xFFFFu)<sp/>/<sp/>65536.0f;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>(t<sp/>*<sp/>2.0f<sp/>-<sp/>1.0f)<sp/>+<sp/>0.1f<sp/>*<sp/>sinf((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(i<sp/>+<sp/>(tok<sp/>%<sp/>31))<sp/>*<sp/>0.07f);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="microbench__gemv_8c_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__api_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>H<sp/>=<sp/>(argc<sp/>&gt;<sp/>1)<sp/>?<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)strtoul(argv[1],<sp/>NULL,<sp/>10)<sp/>:<sp/>256;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>V<sp/>=<sp/>(argc<sp/>&gt;<sp/>2)<sp/>?<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)strtoul(argv[2],<sp/>NULL,<sp/>10)<sp/>:<sp/>1024;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iters<sp/>=<sp/>(argc<sp/>&gt;<sp/>3)<sp/>?<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)strtoul(argv[3],<sp/>NULL,<sp/>10)<sp/>:<sp/>100;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*Wxh<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(H<sp/>*<sp/>H<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*Whh<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(H<sp/>*<sp/>H<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*Woh<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(V<sp/>*<sp/>H<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bh<sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(H<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x<sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(H<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*h<sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(H<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*tmp<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(H<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y<sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(V<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Wxh<sp/>||<sp/>!Whh<sp/>||<sp/>!Woh<sp/>||<sp/>!bh<sp/>||<sp/>!x<sp/>||<sp/>!h<sp/>||<sp/>!tmp<sp/>||<sp/>!y)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;alloc<sp/>failed\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>free(Wxh);<sp/>free(Whh);<sp/>free(Woh);<sp/>free(bh);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>free(x);<sp/>free(h);<sp/>free(tmp);<sp/>free(y);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>1234;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" kindref="member">init_rand</ref>(Wxh,<sp/>H*H,<sp/>&amp;seed,<sp/>1.0f/32.0f);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" kindref="member">init_rand</ref>(Whh,<sp/>H*H,<sp/>&amp;seed,<sp/>1.0f/32.0f);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" kindref="member">init_rand</ref>(Woh,<sp/>V*H,<sp/>&amp;seed,<sp/>1.0f/64.0f);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1ac2fb7e70bd8769725c6e8c3aed17bf50" kindref="member">init_rand</ref>(bh,<sp/><sp/>H,<sp/><sp/><sp/>&amp;seed,<sp/>1.0f/32.0f);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>memset(h,<sp/>0,<sp/>H*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Warmup<sp/>(1<sp/>decode-like<sp/>iteration)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1a2a93eb537305385ec2e3839e02c34e06" kindref="member">embed_token</ref>(1000u,<sp/>x,<sp/>H);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" kindref="member">gemv_rowmajor</ref>(Wxh,<sp/>x,<sp/>tmp,<sp/>H,<sp/>H);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" kindref="member">gemv_rowmajor</ref>(Whh,<sp/>h,<sp/>h,<sp/>H,<sp/>H);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>H;<sp/>++i)<sp/>h[i]<sp/>+=<sp/>tmp[i]<sp/>+<sp/>bh[i];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1a5ad63b621cb6206300427b7af31c3146" kindref="member">vec_tanh</ref>(h,<sp/>H);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" kindref="member">gemv_rowmajor</ref>(Woh,<sp/>h,<sp/>y,<sp/>V,<sp/>H);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Timed<sp/>loop:<sp/>mimic<sp/>decode<sp/>step<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0<sp/>=<sp/><ref refid="microbench__gemv_8c_1a8a295707b83706041868cd34f3c663d5" kindref="member">now_s</ref>();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>0;<sp/>it<sp/>&lt;<sp/>iters;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="microbench__gemv_8c_1a2a93eb537305385ec2e3839e02c34e06" kindref="member">embed_token</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)(1000u<sp/>+<sp/>(it<sp/>&amp;<sp/>31u)),<sp/>x,<sp/>H);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" kindref="member">gemv_rowmajor</ref>(Wxh,<sp/>x,<sp/>tmp,<sp/>H,<sp/>H);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" kindref="member">gemv_rowmajor</ref>(Whh,<sp/>h,<sp/>h,<sp/>H,<sp/>H);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>H;<sp/>++i)<sp/>h[i]<sp/>+=<sp/>tmp[i]<sp/>+<sp/>bh[i];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="microbench__gemv_8c_1a5ad63b621cb6206300427b7af31c3146" kindref="member">vec_tanh</ref>(h,<sp/>H);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="microbench__gemv_8c_1a0bb86ae3f74d09b38ea3c1e35b8cdf9e" kindref="member">gemv_rowmajor</ref>(Woh,<sp/>h,<sp/>y,<sp/>V,<sp/>H);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/><ref refid="microbench__gemv_8c_1a8a295707b83706041868cd34f3c663d5" kindref="member">now_s</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>t1<sp/>-<sp/>t0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>seconds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>us_per_iter<sp/>=<sp/>(dt<sp/>*<sp/>1e6)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)iters;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elems<sp/>=<sp/>(double)(H*H<sp/>+<sp/>H*H<sp/>+<sp/>V*H);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ns_per_elem<sp/>=<sp/>(dt<sp/>*<sp/>1e9)<sp/>/<sp/>(iters<sp/>*<sp/>elems);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bytes_total<sp/>=<sp/>elems<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float);<sp/></highlight><highlight class="comment">/*<sp/>rough<sp/>RW<sp/>per<sp/>iter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gbps<sp/>=<sp/>(bytes_total<sp/>*<sp/>(double)iters<sp/>/<sp/>dt)<sp/>/<sp/>1e9;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;H=%zu<sp/>V=%zu<sp/>iters=%zu\n&quot;</highlight><highlight class="normal">,<sp/>H,<sp/>V,<sp/>iters);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;time:<sp/>%.3f<sp/>ms<sp/>total,<sp/>%.1f<sp/>us/iter,<sp/>%.2f<sp/>ns/elem<sp/>(Wxh+Whh+Woh)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt*1000.0,<sp/>us_per_iter,<sp/>ns_per_elem);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;throughput:<sp/>%.2f<sp/>GB/s<sp/>(approx<sp/>memory<sp/>traffic)\n&quot;</highlight><highlight class="normal">,<sp/>gbps);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>free(Wxh);<sp/>free(Whh);<sp/>free(Woh);<sp/>free(bh);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>free(x);<sp/>free(h);<sp/>free(tmp);<sp/>free(y);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="benchmarks/src/microbench_gemv.c"/>
  </compounddef>
</doxygen>
