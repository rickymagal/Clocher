<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__kernels_8c" kind="file" language="C++">
    <compoundname>test_kernels.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="ie__kernels_8h" local="yes">ie_kernels.h</includes>
    <incdepgraph>
      <node id="6">
        <label>ie_kernels.h</label>
        <link refid="ie__kernels_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/c/test_kernels.c</label>
        <link refid="test__kernels_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__kernels_8c_1a717bb0a59e17d86f4d2bfd483cbefdf7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int vec_allclose</definition>
        <argsstring>(const float *a, const float *b, size_t n, float tol)</argsstring>
        <name>vec_allclose</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
<para>Compare two float vectors with absolute tolerance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tol</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute tolerance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if all elements are within <computeroutput>tol</computeroutput>; non-zero otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="28" column="12" bodyfile="tests/c/test_kernels.c" bodystart="28" bodyend="38"/>
        <referencedby refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" compoundref="test__kernels_8c" startline="109" endline="122">test_gemv_rowmajor_no_bias</referencedby>
        <referencedby refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" compoundref="test__kernels_8c" startline="129" endline="142">test_gemv_rowmajor_with_bias</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__kernels_8c_1ad556a17d3bf13267f9bbdf5a3ae63784" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fill_matrix</definition>
        <argsstring>(float *W, size_t rows, size_t cols)</argsstring>
        <name>fill_matrix</name>
        <param>
          <type>float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>Fill a small, deterministic row-major matrix W[r,c] = (r+1)*0.1 + (c+1)*0.01. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer (size rows*cols). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="47" column="13" bodyfile="tests/c/test_kernels.c" bodystart="47" bodyend="53"/>
        <referencedby refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" compoundref="test__kernels_8c" startline="109" endline="122">test_gemv_rowmajor_no_bias</referencedby>
        <referencedby refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" compoundref="test__kernels_8c" startline="129" endline="142">test_gemv_rowmajor_with_bias</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__kernels_8c_1af2adbc5a2d06d3fde32de9e00526ec02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fill_vector</definition>
        <argsstring>(float *x, size_t n)</argsstring>
        <name>fill_vector</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Fill a small, deterministic vector x[i] = 0.05 * (i+1). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Output buffer (length n). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="61" column="13" bodyfile="tests/c/test_kernels.c" bodystart="61" bodyend="63"/>
        <referencedby refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" compoundref="test__kernels_8c" startline="109" endline="122">test_gemv_rowmajor_no_bias</referencedby>
        <referencedby refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" compoundref="test__kernels_8c" startline="129" endline="142">test_gemv_rowmajor_with_bias</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__kernels_8c_1ae89d2fea722183ea2429cdc3d369c509" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ref_gemv_nominal</definition>
        <argsstring>(const float *W, const float *x, float *y, size_t rows, size_t cols)</argsstring>
        <name>ref_gemv_nominal</name>
        <param>
          <type>const float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>Compute reference row-major GEMV y = W*x (no bias). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Row-major weights (rows x cols). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector (length cols). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector (length rows). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Cols. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="74" column="13" bodyfile="tests/c/test_kernels.c" bodystart="74" bodyend="82"/>
        <referencedby refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" compoundref="test__kernels_8c" startline="109" endline="122">test_gemv_rowmajor_no_bias</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__kernels_8c_1aae1e14b05adc3adcbe1ee42f54e885d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ref_gemv_bias</definition>
        <argsstring>(const float *W, const float *x, float *y, const float *bias, size_t rows, size_t cols)</argsstring>
        <name>ref_gemv_bias</name>
        <param>
          <type>const float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>Compute reference y = W*x + bias. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Row-major weights (rows x cols). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector (length cols). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector (length rows). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Bias vector (length rows). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Cols. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="94" column="13" bodyfile="tests/c/test_kernels.c" bodystart="94" bodyend="102"/>
        <referencedby refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" compoundref="test__kernels_8c" startline="129" endline="142">test_gemv_rowmajor_with_bias</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_gemv_rowmajor_no_bias</definition>
        <argsstring>(void)</argsstring>
        <name>test_gemv_rowmajor_no_bias</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test: GEMV without bias, row-major, blk_k=0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 on success; non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="109" column="12" bodyfile="tests/c/test_kernels.c" bodystart="109" bodyend="122"/>
        <references refid="test__kernels_8c_1ad556a17d3bf13267f9bbdf5a3ae63784" compoundref="test__kernels_8c" startline="47" endline="53">fill_matrix</references>
        <references refid="test__kernels_8c_1af2adbc5a2d06d3fde32de9e00526ec02" compoundref="test__kernels_8c" startline="61" endline="63">fill_vector</references>
        <references refid="ie__kernels_8h_1a4e112b3396ed21919f404631c1d4d7fb" compoundref="gemv__generic_8c" startline="67" endline="71">ie_gemv_f32</references>
        <references refid="test__kernels_8c_1ae89d2fea722183ea2429cdc3d369c509" compoundref="test__kernels_8c" startline="74" endline="82">ref_gemv_nominal</references>
        <references refid="test__kernels_8c_1a717bb0a59e17d86f4d2bfd483cbefdf7" compoundref="test__kernels_8c" startline="28" endline="38">vec_allclose</references>
        <referencedby refid="test__kernels_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__kernels_8c" startline="149" endline="163">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_gemv_rowmajor_with_bias</definition>
        <argsstring>(void)</argsstring>
        <name>test_gemv_rowmajor_with_bias</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test: GEMV with bias epilogue, row-major, blk_k=0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 on success; non-zero on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="129" column="12" bodyfile="tests/c/test_kernels.c" bodystart="129" bodyend="142"/>
        <references refid="test__kernels_8c_1ad556a17d3bf13267f9bbdf5a3ae63784" compoundref="test__kernels_8c" startline="47" endline="53">fill_matrix</references>
        <references refid="test__kernels_8c_1af2adbc5a2d06d3fde32de9e00526ec02" compoundref="test__kernels_8c" startline="61" endline="63">fill_vector</references>
        <references refid="ie__kernels_8h_1a4e112b3396ed21919f404631c1d4d7fb" compoundref="gemv__generic_8c" startline="67" endline="71">ie_gemv_f32</references>
        <references refid="test__kernels_8c_1aae1e14b05adc3adcbe1ee42f54e885d8" compoundref="test__kernels_8c" startline="94" endline="102">ref_gemv_bias</references>
        <references refid="test__kernels_8c_1a717bb0a59e17d86f4d2bfd483cbefdf7" compoundref="test__kernels_8c" startline="28" endline="38">vec_allclose</references>
        <referencedby refid="test__kernels_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__kernels_8c" startline="149" endline="163">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__kernels_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Program entry: run all kernel tests and print &quot;ok test_kernels&quot; on success. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 on success; non-zero on assertion failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_kernels.c" line="149" column="5" bodyfile="tests/c/test_kernels.c" bodystart="149" bodyend="163"/>
        <references refid="ie__kernels_8h_1a1b919f71b86ec1791fe53bc68d5c240d" compoundref="gemv__generic_8c" startline="51" endline="54">ie_kernels_install</references>
        <references refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" compoundref="test__kernels_8c" startline="109" endline="122">test_gemv_rowmajor_no_bias</references>
        <references refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" compoundref="test__kernels_8c" startline="129" endline="142">test_gemv_rowmajor_with_bias</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Unit tests for GEMV kernels (row-major path, bias epilogue). </para>
    </briefdescription>
    <detaileddescription>
<para>This test validates:<itemizedlist>
<listitem><para>Row-major GEMV without bias (blk_k = 0)</para>
</listitem><listitem><para>Row-major GEMV with epilogue bias (blk_k = 0)</para>
</listitem></itemizedlist>
</para>
<para>NOTE: The blocked-K layout is exercised indirectly by integration tests. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__kernels_8h" kindref="compound">ie_kernels.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="test__kernels_8c_1a717bb0a59e17d86f4d2bfd483cbefdf7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1a717bb0a59e17d86f4d2bfd483cbefdf7" kindref="member">vec_allclose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>fabsf(a[i]<sp/>-<sp/>b[i]);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;<sp/>tol)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>at<sp/>%zu:<sp/>a=%.6f<sp/>b=%.6f<sp/>|diff|=%.6f<sp/>&gt;<sp/>%.6f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>a[i],<sp/>b[i],<sp/>d,<sp/>tol);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="test__kernels_8c_1ad556a17d3bf13267f9bbdf5a3ae63784" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1ad556a17d3bf13267f9bbdf5a3ae63784" kindref="member">fill_matrix</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>rows;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>cols;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>W[r*cols<sp/>+<sp/>c]<sp/>=<sp/>(float)(0.1<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(r<sp/>+<sp/>1)<sp/>+<sp/>0.01<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(c<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="test__kernels_8c_1af2adbc5a2d06d3fde32de9e00526ec02" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1af2adbc5a2d06d3fde32de9e00526ec02" kindref="member">fill_vector</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>x[i]<sp/>=<sp/>0.05f<sp/>*<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="test__kernels_8c_1ae89d2fea722183ea2429cdc3d369c509" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1ae89d2fea722183ea2429cdc3d369c509" kindref="member">ref_gemv_nominal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>rows;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*wrow<sp/>=<sp/>W<sp/>+<sp/>r<sp/>*<sp/>cols;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>cols;<sp/>++c)<sp/>acc<sp/>+=<sp/>wrow[c]<sp/>*<sp/>x[c];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>y[r]<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="test__kernels_8c_1aae1e14b05adc3adcbe1ee42f54e885d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1aae1e14b05adc3adcbe1ee42f54e885d8" kindref="member">ref_gemv_bias</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>rows;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*wrow<sp/>=<sp/>W<sp/>+<sp/>r<sp/>*<sp/>cols;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>cols;<sp/>++c)<sp/>acc<sp/>+=<sp/>wrow[c]<sp/>*<sp/>x[c];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>y[r]<sp/>=<sp/>acc<sp/>+<sp/>bias[r];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" kindref="member">test_gemv_rowmajor_no_bias</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>3,<sp/>C<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>W[R*C],<sp/>x[C],<sp/>y[R],<sp/>y_ref[R];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="test__kernels_8c_1ad556a17d3bf13267f9bbdf5a3ae63784" kindref="member">fill_matrix</ref>(W,<sp/>R,<sp/>C);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="test__kernels_8c_1af2adbc5a2d06d3fde32de9e00526ec02" kindref="member">fill_vector</ref>(x,<sp/>C);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="test__kernels_8c_1ae89d2fea722183ea2429cdc3d369c509" kindref="member">ref_gemv_nominal</ref>(W,<sp/>x,<sp/>y_ref,<sp/>R,<sp/>C);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>bias=NULL,<sp/>blk_k=0<sp/>=&gt;<sp/>row-major<sp/>path<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>memset(y,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(y));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="ie__kernels_8h_1a4e112b3396ed21919f404631c1d4d7fb" kindref="member">ie_gemv_f32</ref>(W,<sp/>x,<sp/>y,<sp/>R,<sp/>C,<sp/></highlight><highlight class="comment">/*bias*/</highlight><highlight class="normal">NULL,<sp/></highlight><highlight class="comment">/*blk_k*/</highlight><highlight class="normal">0);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1a717bb0a59e17d86f4d2bfd483cbefdf7" kindref="member">vec_allclose</ref>(y,<sp/>y_ref,<sp/>R,<sp/>1e-6f);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" kindref="member">test_gemv_rowmajor_with_bias</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>3,<sp/>C<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>W[R*C],<sp/>x[C],<sp/>bias[R],<sp/>y[R],<sp/>y_ref[R];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="test__kernels_8c_1ad556a17d3bf13267f9bbdf5a3ae63784" kindref="member">fill_matrix</ref>(W,<sp/>R,<sp/>C);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="test__kernels_8c_1af2adbc5a2d06d3fde32de9e00526ec02" kindref="member">fill_vector</ref>(x,<sp/>C);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>R;<sp/>++r)<sp/>bias[r]<sp/>=<sp/>0.001f<sp/>*<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(r<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><ref refid="test__kernels_8c_1aae1e14b05adc3adcbe1ee42f54e885d8" kindref="member">ref_gemv_bias</ref>(W,<sp/>x,<sp/>y_ref,<sp/>bias,<sp/>R,<sp/>C);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>memset(y,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(y));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="ie__kernels_8h_1a4e112b3396ed21919f404631c1d4d7fb" kindref="member">ie_gemv_f32</ref>(W,<sp/>x,<sp/>y,<sp/>R,<sp/>C,<sp/></highlight><highlight class="comment">/*bias*/</highlight><highlight class="normal">bias,<sp/></highlight><highlight class="comment">/*blk_k*/</highlight><highlight class="normal">0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1a717bb0a59e17d86f4d2bfd483cbefdf7" kindref="member">vec_allclose</ref>(y,<sp/>y_ref,<sp/>R,<sp/>1e-6f);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="test__kernels_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__kernels_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="ie__kernels_8h_1a1b919f71b86ec1791fe53bc68d5c240d" kindref="member">ie_kernels_install</ref>(</highlight><highlight class="comment">/*use_avx2=*/</highlight><highlight class="normal">0);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__kernels_8c_1a0ac9b0c3b1d865ef69bd2bc69d14a685" kindref="member">test_gemv_rowmajor_no_bias</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>test_gemv_rowmajor_no_bias\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__kernels_8c_1a2305be22b4279f3ac4d55f90584569cb" kindref="member">test_gemv_rowmajor_with_bias</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>test_gemv_rowmajor_with_bias\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;ok<sp/>test_kernels&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/c/test_kernels.c"/>
  </compounddef>
</doxygen>
