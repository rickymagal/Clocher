<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__cli_8py" kind="file" language="Python">
    <compoundname>test_cli.py</compoundname>
    <innerclass refid="classtest__cli_1_1CLITests" prot="public">test_cli::CLITests</innerclass>
    <innernamespace refid="namespacetest__cli">test_cli</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetest__cli" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">CLI<sp/>smoke<sp/>tests<sp/>for<sp/>the<sp/>inference<sp/>engine<sp/>(stdlib-only).</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">This<sp/>test<sp/>executes<sp/>the<sp/>compiled<sp/>binary<sp/>with<sp/>a<sp/>small<sp/>prompt<sp/>and<sp/>asserts<sp/>that:</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">-<sp/>The<sp/>process<sp/>exits<sp/>successfully.</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">-<sp/>The<sp/>output<sp/>is<sp/>a<sp/>single<sp/>JSON<sp/>object<sp/>with<sp/>expected<sp/>numeric<sp/>fields.</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>json</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>subprocess</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pathlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Path</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classtest__cli_1_1CLITests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cli_1_1CLITests" kindref="compound">CLITests</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="16" refid="classtest__cli_1_1CLITests_1afdf8ca55ddfd31ddb8271ad379641dfb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cli_1_1CLITests_1afdf8ca55ddfd31ddb8271ad379641dfb" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Binary<sp/>built<sp/>by<sp/>`make<sp/>build`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="classtest__cli_1_1CLITests_1ac29691600e1e118bf50d7f5d61aa3658" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cli_1_1CLITests_1ac29691600e1e118bf50d7f5d61aa3658" kindref="member">repo_root</ref><sp/>=<sp/>Path(__file__).resolve().parents[2]</highlight></codeline>
<codeline lineno="19" refid="classtest__cli_1_1CLITests_1a2f5fec3618a03998cf9023e80784845b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cli_1_1CLITests_1a2f5fec3618a03998cf9023e80784845b" kindref="member">bin_path</ref><sp/>=<sp/>self.<ref refid="classtest__cli_1_1CLITests_1ac29691600e1e118bf50d7f5d61aa3658" kindref="member">repo_root</ref><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;build&quot;</highlight><highlight class="normal"><sp/>/<sp/></highlight><highlight class="stringliteral">&quot;inference-engine&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classtest__cli_1_1CLITests_1a459ef10e1a639daf719284a87e3ba395" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cli_1_1CLITests_1a459ef10e1a639daf719284a87e3ba395" kindref="member">test_cli_runs_and_emits_json</ref>(self):</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.<ref refid="classtest__cli_1_1CLITests_1a2f5fec3618a03998cf9023e80784845b" kindref="member">bin_path</ref>.exists(),<sp/>msg=</highlight><highlight class="stringliteral">&quot;Binary<sp/>not<sp/>found.<sp/>Run:<sp/>make<sp/>build&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>subprocess.run(</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[str(self.<ref refid="classtest__cli_1_1CLITests_1a2f5fec3618a03998cf9023e80784845b" kindref="member">bin_path</ref>),<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>prompt&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdout=subprocess.PIPE,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>cp.stdout.strip()</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(line.startswith(</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>line.endswith(</highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">),<sp/>msg=f</highlight><highlight class="stringliteral">&quot;Not<sp/>JSON:<sp/>{line}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>json.loads(line)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Minimal<sp/>schema<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tokens_generated&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wall_time_s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tps_true&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;latency_p50_ms&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;latency_p95_ms&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rss_peak_mb&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kv_hits&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kv_misses&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(key,<sp/>m,<sp/>msg=f</highlight><highlight class="stringliteral">&quot;Missing<sp/>field:<sp/>{key}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIsInstance(m[</highlight><highlight class="stringliteral">&quot;tokens_generated&quot;</highlight><highlight class="normal">],<sp/>int)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertGreaterEqual(m[</highlight><highlight class="stringliteral">&quot;tokens_generated&quot;</highlight><highlight class="normal">],<sp/>0)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIsInstance(m[</highlight><highlight class="stringliteral">&quot;tps_true&quot;</highlight><highlight class="normal">],<sp/>(int,<sp/>float))</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertGreater(m[</highlight><highlight class="stringliteral">&quot;tps_true&quot;</highlight><highlight class="normal">],<sp/>0.0)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53" refid="namespacetest__cli_1aac5e24a93f9d205872853c83cd5d0c1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>unittest.main(verbosity=2)</highlight></codeline>
    </programlisting>
    <location file="tests/python/test_cli.py"/>
  </compounddef>
</doxygen>
