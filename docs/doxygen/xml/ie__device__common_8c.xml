<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="ie__device__common_8c" kind="file" language="C++">
    <compoundname>ie_device_common.c</compoundname>
    <includes refid="ie__device_8h" local="yes">ie_device.h</includes>
    <includes refid="ie__kernels_8h" local="yes">ie_kernels.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">dlfcn.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ie_device.h</label>
        <link refid="ie__device_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ie_kernels.h</label>
        <link refid="ie__kernels_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>engine/src/devices/ie_device_common.c</label>
        <link refid="ie__device__common_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ctype.h</label>
      </node>
      <node id="7">
        <label>dlfcn.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structie__device__vtbl" prot="public">ie_device_vtbl</innerclass>
    <innerclass refid="structie__device" prot="public">ie_device</innerclass>
    <innerclass refid="structcpu__impl" prot="public">cpu_impl</innerclass>
    <innerclass refid="structcuda__impl" prot="public">cuda_impl</innerclass>
    <innerclass refid="structze__impl" prot="public">ze_impl</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" prot="public" static="no">
        <type>struct <ref refid="structie__device__vtbl" kindref="compound">ie_device_vtbl</ref></type>
        <definition>typedef struct ie_device_vtbl ie_device_vtbl_t</definition>
        <argsstring></argsstring>
        <name>ie_device_vtbl_t</name>
        <briefdescription>
<para>Method table for a device backend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="26" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" prot="public" static="no">
        <type>struct <ref refid="structcpu__impl" kindref="compound">cpu_impl</ref></type>
        <definition>typedef struct cpu_impl cpu_impl_t</definition>
        <argsstring></argsstring>
        <name>cpu_impl_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="42" column="12"/>
      </memberdef>
      <memberdef kind="typedef" id="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" prot="public" static="no">
        <type>struct <ref refid="structcuda__impl" kindref="compound">cuda_impl</ref></type>
        <definition>typedef struct cuda_impl cuda_impl_t</definition>
        <argsstring></argsstring>
        <name>cuda_impl_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="56" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" prot="public" static="no">
        <type>struct <ref refid="structze__impl" kindref="compound">ze_impl</ref></type>
        <definition>typedef struct ze_impl ze_impl_t</definition>
        <argsstring></argsstring>
        <name>ze_impl_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="70" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ie__device__common_8c_1a4099e48a20d5155401706f728c99c435" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref> *</type>
        <definition>static cpu_impl_t * cpu_new</definition>
        <argsstring>(void)</argsstring>
        <name>cpu_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Allocate and initialize the CPU backend implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Newly allocated <ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref> pointer or NULL on OOM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="125" column="19" bodyfile="engine/src/devices/ie_device_common.c" bodystart="125" bodyend="130" declfile="engine/src/devices/ie_device_common.c" declline="44" declcolumn="19"/>
        <references refid="structcpu__impl_1a4479a15d3566dee6e784b5341e9374a8" compoundref="ie__device__common_8c" startline="41">cpu_impl::name</references>
        <referencedby refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a49b8c853d1b641c9402ed5e92d8af962" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cpu_caps</definition>
        <argsstring>(const void *self, ie_device_caps_t *out)</argsstring>
        <name>cpu_caps</name>
        <param>
          <type>const void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Report CPU device capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Implementation pointer (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output capabilities structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="139" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="139" bodyend="149" declfile="engine/src/devices/ie_device_common.c" declline="45" declcolumn="13"/>
        <references refid="structie__device__caps_1a771260909362d500182f5d806a415a75" compoundref="ie__device_8h" startline="37">ie_device_caps::driver</references>
        <references refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" compoundref="ie__device_8h" startline="33">ie_device_caps::has_gemv_f32</references>
        <references refid="structie__device__caps_1a895a919343ce237ea1c3e4231e5c4ca2" compoundref="ie__device_8h" startline="34">ie_device_caps::has_mem_copy</references>
        <references refid="structie__device__caps_1acb89cfdb7c21e1b60d51e45d4faf39a7" compoundref="ie__device_8h" startline="35">ie_device_caps::has_streams</references>
        <references refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" compoundref="ie__device_8h" startline="36">ie_device_caps::name</references>
        <referencedby refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a4fb9bb01bfbe71517f9df925ba9c93ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cpu_gemv_f32</definition>
        <argsstring>(void *self, const float *W, const float *x, float *y, size_t rows, size_t cols, const float *bias, size_t blk_k)</argsstring>
        <name>cpu_gemv_f32</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blk_k</declname>
        </param>
        <briefdescription>
<para>CPU implementation of GEMV FP32 via existing kernels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Implementation pointer (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Row-major FP32 weights matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>FP32 input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>FP32 output vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in W (and y). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in W (and x). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional FP32 bias (NULL if none). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_k</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional blocked-K hint (ignored by CPU). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on invalid parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="164" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="164" bodyend="172" declfile="engine/src/devices/ie_device_common.c" declline="46" declcolumn="13"/>
        <references refid="ie__kernels_8h_1a4e112b3396ed21919f404631c1d4d7fb" compoundref="gemv__generic_8c" startline="67" endline="71">ie_gemv_f32</references>
        <referencedby refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a4c7a3b8d7f7279d7680aa68e429e6206" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cpu_memcpy</definition>
        <argsstring>(void *self, void *dst, const void *src, size_t nbytes)</argsstring>
        <name>cpu_memcpy</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>CPU implementation of memcpy wrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Implementation pointer (unused). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on invalid parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="183" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="183" bodyend="188" declfile="engine/src/devices/ie_device_common.c" declline="48" declcolumn="13"/>
        <referencedby refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a94f0164f6cb0f1f874ad9b18194cfbc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cpu_destroy</definition>
        <argsstring>(void *self)</argsstring>
        <name>cpu_destroy</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Destroy CPU implementation object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Implementation pointer returned by <ref refid="ie__device__common_8c_1a4099e48a20d5155401706f728c99c435" kindref="member">cpu_new()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="195" column="13" bodyfile="engine/src/devices/ie_device_common.c" bodystart="195" bodyend="197" declfile="engine/src/devices/ie_device_common.c" declline="49" declcolumn="13"/>
        <referencedby refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cuda_try_create</definition>
        <argsstring>(void **out_impl, ie_device_vtbl_t *out_vt)</argsstring>
        <name>cuda_try_create</name>
        <param>
          <type>void **</type>
          <declname>out_impl</declname>
        </param>
        <param>
          <type><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref> *</type>
          <declname>out_vt</declname>
        </param>
        <briefdescription>
<para>Attempt to construct a CUDA backend via dlopen (stub). </para>
        </briefdescription>
        <detaileddescription>
<para>Resolves libcuda only; kernels are not implemented yet. The device object will exist, but all compute methods return unimplemented until kernels land.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_impl</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: implementation pointer on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_vt</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: vtable populated with CUDA stubs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero if CUDA cannot be initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="211" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="211" bodyend="229" declfile="engine/src/devices/ie_device_common.c" declline="58" declcolumn="13"/>
        <references refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" compoundref="ie__device__common_8c" startline="21">ie_device_vtbl::caps</references>
        <references refid="ie__device__common_8c_1ad556dbc1215b961b5395a7948cd155a8" compoundref="ie__device__common_8c" startline="238" endline="248">cuda_caps_c</references>
        <references refid="ie__device__common_8c_1ad163f65fc15c9ca98d2ced5bfead8a06" compoundref="ie__device__common_8c" startline="278" endline="282">cuda_destroy_c</references>
        <references refid="ie__device__common_8c_1ab170c8ac731059b822713cd35cae51fe" compoundref="ie__device__common_8c" startline="255" endline="261">cuda_gemv_c</references>
        <references refid="ie__device__common_8c_1acca54ad8925643337a1bab31bdf4b4f8" compoundref="ie__device__common_8c" startline="268" endline="271">cuda_memcpy_c</references>
        <references refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" compoundref="ie__device__common_8c" startline="25">ie_device_vtbl::destroy</references>
        <references refid="structcuda__impl_1ac0872251863fea67af3ca65bc624c5a2" compoundref="ie__device__common_8c" startline="55">cuda_impl::driver</references>
        <references refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" compoundref="ie__device__common_8c" startline="22">ie_device_vtbl::gemv_f32</references>
        <references refid="structcuda__impl_1a7a17f68ddd44ad2253b3c0b70a53e4e6" compoundref="ie__device__common_8c" startline="53">cuda_impl::h_cuda</references>
        <references refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" compoundref="ie__device__common_8c" startline="24">ie_device_vtbl::memcpy</references>
        <references refid="structcuda__impl_1a9cf11521fb3e883109ee50c99faa7843" compoundref="ie__device__common_8c" startline="54">cuda_impl::name</references>
        <references refid="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" compoundref="ie__device__common_8c" startline="90" endline="96">try_open_any</references>
        <referencedby refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1ad556dbc1215b961b5395a7948cd155a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cuda_caps_c</definition>
        <argsstring>(const void *self, ie_device_caps_t *out)</argsstring>
        <name>cuda_caps_c</name>
        <param>
          <type>const void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Report CUDA capabilities (stub: unimplemented compute). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>CUDA implementation pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output capabilities structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="238" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="238" bodyend="248" declfile="engine/src/devices/ie_device_common.c" declline="59" declcolumn="13"/>
        <references refid="structcuda__impl_1ac0872251863fea67af3ca65bc624c5a2" compoundref="ie__device__common_8c" startline="55">cuda_impl::driver</references>
        <references refid="structie__device__caps_1a771260909362d500182f5d806a415a75" compoundref="ie__device_8h" startline="37">ie_device_caps::driver</references>
        <references refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" compoundref="ie__device_8h" startline="33">ie_device_caps::has_gemv_f32</references>
        <references refid="structie__device__caps_1a895a919343ce237ea1c3e4231e5c4ca2" compoundref="ie__device_8h" startline="34">ie_device_caps::has_mem_copy</references>
        <references refid="structie__device__caps_1acb89cfdb7c21e1b60d51e45d4faf39a7" compoundref="ie__device_8h" startline="35">ie_device_caps::has_streams</references>
        <references refid="structcuda__impl_1a9cf11521fb3e883109ee50c99faa7843" compoundref="ie__device__common_8c" startline="54">cuda_impl::name</references>
        <references refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" compoundref="ie__device_8h" startline="36">ie_device_caps::name</references>
        <referencedby refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" compoundref="ie__device__common_8c" startline="211" endline="229">cuda_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1ab170c8ac731059b822713cd35cae51fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cuda_gemv_c</definition>
        <argsstring>(void *self, const float *W, const float *x, float *y, size_t rows, size_t cols, const float *bias, size_t blk_k)</argsstring>
        <name>cuda_gemv_c</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blk_k</declname>
        </param>
        <briefdescription>
<para>CUDA GEMV stub (returns unimplemented). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Always -2 until kernels are implemented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="255" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="255" bodyend="261" declfile="engine/src/devices/ie_device_common.c" declline="60" declcolumn="13"/>
        <referencedby refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" compoundref="ie__device__common_8c" startline="211" endline="229">cuda_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1acca54ad8925643337a1bab31bdf4b4f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int cuda_memcpy_c</definition>
        <argsstring>(void *self, void *dst, const void *src, size_t n)</argsstring>
        <name>cuda_memcpy_c</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>CUDA memcpy stub (returns unimplemented). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Always -2 until copies are implemented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="268" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="268" bodyend="271" declfile="engine/src/devices/ie_device_common.c" declline="62" declcolumn="13"/>
        <referencedby refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" compoundref="ie__device__common_8c" startline="211" endline="229">cuda_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1ad163f65fc15c9ca98d2ced5bfead8a06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cuda_destroy_c</definition>
        <argsstring>(void *self)</argsstring>
        <name>cuda_destroy_c</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Destroy CUDA implementation and close libcuda handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>CUDA implementation pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="278" column="13" bodyfile="engine/src/devices/ie_device_common.c" bodystart="278" bodyend="282" declfile="engine/src/devices/ie_device_common.c" declline="63" declcolumn="13"/>
        <references refid="structcuda__impl_1a7a17f68ddd44ad2253b3c0b70a53e4e6" compoundref="ie__device__common_8c" startline="53">cuda_impl::h_cuda</references>
        <referencedby refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" compoundref="ie__device__common_8c" startline="211" endline="229">cuda_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a6877d362577444879b41090af23950d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ze_try_create</definition>
        <argsstring>(void **out_impl, ie_device_vtbl_t *out_vt)</argsstring>
        <name>ze_try_create</name>
        <param>
          <type>void **</type>
          <declname>out_impl</declname>
        </param>
        <param>
          <type><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref> *</type>
          <declname>out_vt</declname>
        </param>
        <briefdescription>
<para>Attempt to construct a Level Zero backend via dlopen (stub). </para>
        </briefdescription>
        <detaileddescription>
<para>Resolves ze_loader only; kernels are not implemented yet.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_impl</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: implementation pointer on success. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_vt</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: vtable populated with ZE stubs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero if ZE cannot be initialized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="295" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="295" bodyend="313" declfile="engine/src/devices/ie_device_common.c" declline="72" declcolumn="13"/>
        <references refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" compoundref="ie__device__common_8c" startline="21">ie_device_vtbl::caps</references>
        <references refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" compoundref="ie__device__common_8c" startline="25">ie_device_vtbl::destroy</references>
        <references refid="structze__impl_1a3658972a66aa2284d3db33abf484f0fd" compoundref="ie__device__common_8c" startline="69">ze_impl::driver</references>
        <references refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" compoundref="ie__device__common_8c" startline="22">ie_device_vtbl::gemv_f32</references>
        <references refid="structze__impl_1a60b05ff0fe4754563c9ca58df405adcc" compoundref="ie__device__common_8c" startline="67">ze_impl::h_ze</references>
        <references refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" compoundref="ie__device__common_8c" startline="24">ie_device_vtbl::memcpy</references>
        <references refid="structze__impl_1a04b0234eeba1b0a50b302d5bb975faa2" compoundref="ie__device__common_8c" startline="68">ze_impl::name</references>
        <references refid="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" compoundref="ie__device__common_8c" startline="90" endline="96">try_open_any</references>
        <references refid="ie__device__common_8c_1a324768d76bae88d6bb688d5598d1223a" compoundref="ie__device__common_8c" startline="322" endline="332">ze_caps_c</references>
        <references refid="ie__device__common_8c_1a94018036cde4e553d082aad200a3c4ff" compoundref="ie__device__common_8c" startline="362" endline="366">ze_destroy_c</references>
        <references refid="ie__device__common_8c_1a57f5ec5d8bd44ff5f04b6f581a33dfde" compoundref="ie__device__common_8c" startline="339" endline="345">ze_gemv_c</references>
        <references refid="ie__device__common_8c_1a0e34398da92bf6645c6ee75e561ca526" compoundref="ie__device__common_8c" startline="352" endline="355">ze_memcpy_c</references>
        <referencedby refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a324768d76bae88d6bb688d5598d1223a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ze_caps_c</definition>
        <argsstring>(const void *self, ie_device_caps_t *out)</argsstring>
        <name>ze_caps_c</name>
        <param>
          <type>const void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Report Level Zero capabilities (stub: unimplemented compute). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>ZE implementation pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output capabilities structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="322" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="322" bodyend="332" declfile="engine/src/devices/ie_device_common.c" declline="73" declcolumn="13"/>
        <references refid="structie__device__caps_1a771260909362d500182f5d806a415a75" compoundref="ie__device_8h" startline="37">ie_device_caps::driver</references>
        <references refid="structze__impl_1a3658972a66aa2284d3db33abf484f0fd" compoundref="ie__device__common_8c" startline="69">ze_impl::driver</references>
        <references refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" compoundref="ie__device_8h" startline="33">ie_device_caps::has_gemv_f32</references>
        <references refid="structie__device__caps_1a895a919343ce237ea1c3e4231e5c4ca2" compoundref="ie__device_8h" startline="34">ie_device_caps::has_mem_copy</references>
        <references refid="structie__device__caps_1acb89cfdb7c21e1b60d51e45d4faf39a7" compoundref="ie__device_8h" startline="35">ie_device_caps::has_streams</references>
        <references refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" compoundref="ie__device_8h" startline="36">ie_device_caps::name</references>
        <references refid="structze__impl_1a04b0234eeba1b0a50b302d5bb975faa2" compoundref="ie__device__common_8c" startline="68">ze_impl::name</references>
        <referencedby refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" compoundref="ie__device__common_8c" startline="295" endline="313">ze_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a57f5ec5d8bd44ff5f04b6f581a33dfde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ze_gemv_c</definition>
        <argsstring>(void *self, const float *W, const float *x, float *y, size_t rows, size_t cols, const float *bias, size_t blk_k)</argsstring>
        <name>ze_gemv_c</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blk_k</declname>
        </param>
        <briefdescription>
<para>Level Zero GEMV stub (returns unimplemented). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Always -2 until kernels are implemented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="339" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="339" bodyend="345" declfile="engine/src/devices/ie_device_common.c" declline="74" declcolumn="13"/>
        <referencedby refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" compoundref="ie__device__common_8c" startline="295" endline="313">ze_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a0e34398da92bf6645c6ee75e561ca526" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ze_memcpy_c</definition>
        <argsstring>(void *self, void *dst, const void *src, size_t n)</argsstring>
        <name>ze_memcpy_c</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Level Zero memcpy stub (returns unimplemented). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Always -2 until copies are implemented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="352" column="12" bodyfile="engine/src/devices/ie_device_common.c" bodystart="352" bodyend="355" declfile="engine/src/devices/ie_device_common.c" declline="76" declcolumn="13"/>
        <referencedby refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" compoundref="ie__device__common_8c" startline="295" endline="313">ze_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a94018036cde4e553d082aad200a3c4ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ze_destroy_c</definition>
        <argsstring>(void *self)</argsstring>
        <name>ze_destroy_c</name>
        <param>
          <type>void *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
<para>Destroy Level Zero implementation and close loader handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>ZE implementation pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="362" column="13" bodyfile="engine/src/devices/ie_device_common.c" bodystart="362" bodyend="366" declfile="engine/src/devices/ie_device_common.c" declline="77" declcolumn="13"/>
        <references refid="structze__impl_1a60b05ff0fe4754563c9ca58df405adcc" compoundref="ie__device__common_8c" startline="67">ze_impl::h_ze</references>
        <referencedby refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" compoundref="ie__device__common_8c" startline="295" endline="313">ze_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * try_open_any</definition>
        <argsstring>(const char *const *names)</argsstring>
        <name>try_open_any</name>
        <param>
          <type>const char *const *</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Try to open one of the candidate shared libraries using dlopen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL-terminated array of soname candidates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dlopen handle on success; NULL if none can be opened. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="90" column="13" bodyfile="engine/src/devices/ie_device_common.c" bodystart="90" bodyend="96" declfile="engine/src/devices/ie_device_common.c" declline="80" declcolumn="13"/>
        <referencedby refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" compoundref="ie__device__common_8c" startline="211" endline="229">cuda_try_create</referencedby>
        <referencedby refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" compoundref="ie__device__common_8c" startline="295" endline="313">ze_try_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1aab258e9f33c12fc1276783d70b8c75a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ie__device_8h_1a3bcf315cedd0fd154b55784585a9f1ec" kindref="member">ie_device_kind_t</ref></type>
        <definition>ie_device_kind_t ie_device_kind_from_str</definition>
        <argsstring>(const char *s)</argsstring>
        <name>ie_device_kind_from_str</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Parse a device kind from a string (case-insensitive). </para>
        </briefdescription>
        <detaileddescription>
<para>Parse a device kind from a string.</para>
<para>Accepts &quot;cpu&quot;, &quot;cuda&quot;, &quot;ze&quot;. Unknown strings return IE_DEV_CPU.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Parsed device kind. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="106" column="18" bodyfile="engine/src/devices/ie_device_common.c" bodystart="106" bodyend="116"/>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" compoundref="ie__device_8h" startline="19">IE_DEV_CPU</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" compoundref="ie__device_8h" startline="20">IE_DEV_CUDA</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fa3a29450e9feabd789030b167dc34fbd7" compoundref="ie__device_8h" startline="21">IE_DEV_ZE</references>
        <referencedby refid="test__device_8c_1af2262a71f964197c86339e3797d0c9bb" compoundref="test__device_8c" startline="13" endline="19">test_kind_parse</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a3e42fcc4b9579a9bf14520cb1afe733b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ie_device_create</definition>
        <argsstring>(ie_device_kind_t kind, ie_device_t **out_dev)</argsstring>
        <name>ie_device_create</name>
        <param>
          <type><ref refid="ie__device_8h_1a3bcf315cedd0fd154b55784585a9f1ec" kindref="member">ie_device_kind_t</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref> **</type>
          <declname>out_dev</declname>
        </param>
        <briefdescription>
<para>Create a device for the requested kind, with CPU fallback. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a device handle for the requested kind (with fallback).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested kind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: allocated device handle on success. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="377" column="5" bodyfile="engine/src/devices/ie_device_common.c" bodystart="377" bodyend="406"/>
        <references refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" compoundref="ie__device__common_8c" startline="21">ie_device_vtbl::caps</references>
        <references refid="ie__device__common_8c_1a49b8c853d1b641c9402ed5e92d8af962" compoundref="ie__device__common_8c" startline="139" endline="149">cpu_caps</references>
        <references refid="ie__device__common_8c_1a94f0164f6cb0f1f874ad9b18194cfbc2" compoundref="ie__device__common_8c" startline="195" endline="197">cpu_destroy</references>
        <references refid="ie__device__common_8c_1a4fb9bb01bfbe71517f9df925ba9c93ec" compoundref="ie__device__common_8c" startline="164" endline="172">cpu_gemv_f32</references>
        <references refid="ie__device__common_8c_1a4c7a3b8d7f7279d7680aa68e429e6206" compoundref="ie__device__common_8c" startline="183" endline="188">cpu_memcpy</references>
        <references refid="ie__device__common_8c_1a4099e48a20d5155401706f728c99c435" compoundref="ie__device__common_8c" startline="125" endline="130">cpu_new</references>
        <references refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" compoundref="ie__device__common_8c" startline="211" endline="229">cuda_try_create</references>
        <references refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" compoundref="ie__device__common_8c" startline="25">ie_device_vtbl::destroy</references>
        <references refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" compoundref="ie__device__common_8c" startline="22">ie_device_vtbl::gemv_f32</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" compoundref="ie__device_8h" startline="19">IE_DEV_CPU</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" compoundref="ie__device_8h" startline="20">IE_DEV_CUDA</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fa3a29450e9feabd789030b167dc34fbd7" compoundref="ie__device_8h" startline="21">IE_DEV_ZE</references>
        <references refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" compoundref="ie__device__common_8c" startline="33">ie_device::impl</references>
        <references refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" compoundref="ie__device__common_8c" startline="34">ie_device::kind</references>
        <references refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" compoundref="ie__device__common_8c" startline="24">ie_device_vtbl::memcpy</references>
        <references refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" compoundref="ie__device__common_8c" startline="32">ie_device::vt</references>
        <references refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" compoundref="ie__device__common_8c" startline="295" endline="313">ze_try_create</references>
        <referencedby refid="ie__device_8h_1af9a99d92974f072775057b5def388b77" compoundref="ie__device__common_8c" startline="444" endline="462">ie_device_gemv_f32</referencedby>
        <referencedby refid="ie__device_8h_1ad8fe47f93fa5e18c7cf07a153f1de2fb" compoundref="ie__device__common_8c" startline="473" endline="487">ie_device_memcpy</referencedby>
        <referencedby refid="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" compoundref="test__device_8c" startline="24" endline="31">test_cpu_caps</referencedby>
        <referencedby refid="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" compoundref="test__device_8c" startline="39" endline="48">test_gpu_fallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1a8f8a88a7dd6a58749275d2f3dea9a0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_device_destroy</definition>
        <argsstring>(ie_device_t *dev)</argsstring>
        <name>ie_device_destroy</name>
        <param>
          <type><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Destroy a device handle and its backend implementation. </para>
        </briefdescription>
        <detaileddescription>
<para>Destroy a device handle and release resources.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle created by <ref refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" kindref="member">ie_device_create()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="413" column="6" bodyfile="engine/src/devices/ie_device_common.c" bodystart="413" bodyend="417"/>
        <references refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" compoundref="ie__device__common_8c" startline="25">ie_device_vtbl::destroy</references>
        <references refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" compoundref="ie__device__common_8c" startline="33">ie_device::impl</references>
        <references refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" compoundref="ie__device__common_8c" startline="32">ie_device::vt</references>
        <referencedby refid="ie__device_8h_1af9a99d92974f072775057b5def388b77" compoundref="ie__device__common_8c" startline="444" endline="462">ie_device_gemv_f32</referencedby>
        <referencedby refid="ie__device_8h_1ad8fe47f93fa5e18c7cf07a153f1de2fb" compoundref="ie__device__common_8c" startline="473" endline="487">ie_device_memcpy</referencedby>
        <referencedby refid="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" compoundref="test__device_8c" startline="24" endline="31">test_cpu_caps</referencedby>
        <referencedby refid="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" compoundref="test__device_8c" startline="39" endline="48">test_gpu_fallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1aa55efab6527903fcc61f787ebc05c1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ie_device_caps</definition>
        <argsstring>(const ie_device_t *dev, ie_device_caps_t *out_caps)</argsstring>
        <name>ie_device_caps</name>
        <param>
          <type>const <ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref> *</type>
          <declname>out_caps</declname>
        </param>
        <briefdescription>
<para>Retrieve capabilities from a device backend. </para>
        </briefdescription>
        <detaileddescription>
<para>Query device capabilities.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_caps</parametername>
</parameternamelist>
<parameterdescription>
<para>Output capabilities structure (non-NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="426" column="5" bodyfile="engine/src/devices/ie_device_common.c" bodystart="426" bodyend="429"/>
        <references refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" compoundref="ie__device__common_8c" startline="21">ie_device_vtbl::caps</references>
        <references refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" compoundref="ie__device__common_8c" startline="33">ie_device::impl</references>
        <references refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" compoundref="ie__device__common_8c" startline="32">ie_device::vt</references>
        <referencedby refid="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" compoundref="test__device_8c" startline="24" endline="31">test_cpu_caps</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1af9a99d92974f072775057b5def388b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ie_device_gemv_f32</definition>
        <argsstring>(ie_device_t *dev, const float *W, const float *x, float *y, size_t rows, size_t cols, const float *bias, size_t blk_k)</argsstring>
        <name>ie_device_gemv_f32</name>
        <param>
          <type><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blk_k</declname>
        </param>
        <briefdescription>
<para>Execute GEMV on the device, with CPU fallback if unimplemented. </para>
        </briefdescription>
        <detaileddescription>
<para>Device-side GEMV (FP32): y = W * x (+ optional bias).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Row-major weights. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows in W / length of y. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Cols in W / length of x. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional bias or NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_k</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional blocked-K hint (backend-specific). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="444" column="5" bodyfile="engine/src/devices/ie_device_common.c" bodystart="444" bodyend="462"/>
        <references refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" compoundref="ie__device__common_8c" startline="22">ie_device_vtbl::gemv_f32</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" compoundref="ie__device_8h" startline="19">IE_DEV_CPU</references>
        <references refid="ie__device__common_8c_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</references>
        <references refid="ie__device__common_8c_1a8f8a88a7dd6a58749275d2f3dea9a0ab" compoundref="ie__device__common_8c" startline="413" endline="417">ie_device_destroy</references>
        <references refid="ie__device__common_8c_1af9a99d92974f072775057b5def388b77" compoundref="ie__device__common_8c" startline="444" endline="462">ie_device_gemv_f32</references>
        <references refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" compoundref="ie__device__common_8c" startline="33">ie_device::impl</references>
        <references refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" compoundref="ie__device__common_8c" startline="34">ie_device::kind</references>
        <references refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" compoundref="ie__device__common_8c" startline="32">ie_device::vt</references>
        <referencedby refid="ie__device_8h_1af9a99d92974f072775057b5def388b77" compoundref="ie__device__common_8c" startline="444" endline="462">ie_device_gemv_f32</referencedby>
        <referencedby refid="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" compoundref="test__device_8c" startline="39" endline="48">test_gpu_fallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="ie__device__common_8c_1ad8fe47f93fa5e18c7cf07a153f1de2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ie_device_memcpy</definition>
        <argsstring>(ie_device_t *dev, void *dst, const void *src, size_t nbytes)</argsstring>
        <name>ie_device_memcpy</name>
        <param>
          <type><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Perform a memcpy using the device backend, with CPU fallback. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy memory using the device backend.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; non-zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/devices/ie_device_common.c" line="473" column="5" bodyfile="engine/src/devices/ie_device_common.c" bodystart="473" bodyend="487"/>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" compoundref="ie__device_8h" startline="19">IE_DEV_CPU</references>
        <references refid="ie__device__common_8c_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</references>
        <references refid="ie__device__common_8c_1a8f8a88a7dd6a58749275d2f3dea9a0ab" compoundref="ie__device__common_8c" startline="413" endline="417">ie_device_destroy</references>
        <references refid="ie__device__common_8c_1ad8fe47f93fa5e18c7cf07a153f1de2fb" compoundref="ie__device__common_8c" startline="473" endline="487">ie_device_memcpy</references>
        <references refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" compoundref="ie__device__common_8c" startline="33">ie_device::impl</references>
        <references refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" compoundref="ie__device__common_8c" startline="34">ie_device::kind</references>
        <references refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" compoundref="ie__device__common_8c" startline="24">ie_device_vtbl::memcpy</references>
        <references refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" compoundref="ie__device__common_8c" startline="32">ie_device::vt</references>
        <referencedby refid="ie__device_8h_1ad8fe47f93fa5e18c7cf07a153f1de2fb" compoundref="ie__device__common_8c" startline="473" endline="487">ie_device_memcpy</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>C11 implementation of the device abstraction with CPU backend and CUDA/Level Zero stubs resolved via dlopen (graceful fallback). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__device_8h" kindref="compound">ie_device.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__kernels_8h" kindref="compound">ie_kernels.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>cpu<sp/>gemv<sp/>entry<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dlfcn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==============================<sp/>VTable<sp/>==================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="structie__device__vtbl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__device__vtbl" kindref="compound">ie_device_vtbl</ref><sp/>{</highlight></codeline>
<codeline lineno="21" refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" refkind="member"><highlight class="normal"><sp/><sp/>int<sp/><sp/>(*<ref refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" kindref="member">caps</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out);</highlight></codeline>
<codeline lineno="22" refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" refkind="member"><highlight class="normal"><sp/><sp/>int<sp/><sp/>(*<ref refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" kindref="member">gemv_f32</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k);</highlight></codeline>
<codeline lineno="24" refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" refkind="member"><highlight class="normal"><sp/><sp/>int<sp/><sp/>(*<ref refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" kindref="member">memcpy</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes);</highlight></codeline>
<codeline lineno="25" refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" refkind="member"><highlight class="normal"><sp/><sp/>void<sp/>(*<ref refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" kindref="member">destroy</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self);</highlight></codeline>
<codeline lineno="26" refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" refkind="member"><highlight class="normal">}<sp/><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structie__device" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__device" kindref="compound">ie_device</ref><sp/>{</highlight></codeline>
<codeline lineno="32" refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref><sp/><ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33" refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34" refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="ie__device_8h_1a3bcf315cedd0fd154b55784585a9f1ec" kindref="member">ie_device_kind_t</ref><sp/><ref refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" kindref="member">kind</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>============================<sp/>Declarations<sp/>==============================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CPU<sp/>backend<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structcpu__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcpu__impl" kindref="compound">cpu_impl</ref><sp/>{</highlight></codeline>
<codeline lineno="41" refid="structcpu__impl_1a4479a15d3566dee6e784b5341e9374a8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structcpu__impl_1a4479a15d3566dee6e784b5341e9374a8" kindref="member">name</ref>[64];</highlight></codeline>
<codeline lineno="42" refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" refkind="member"><highlight class="normal">}<sp/><ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref><sp/>*<ref refid="ie__device__common_8c_1a4099e48a20d5155401706f728c99c435" kindref="member">cpu_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a49b8c853d1b641c9402ed5e92d8af962" kindref="member">cpu_caps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a4fb9bb01bfbe71517f9df925ba9c93ec" kindref="member">cpu_gemv_f32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a4c7a3b8d7f7279d7680aa68e429e6206" kindref="member">cpu_memcpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a94f0164f6cb0f1f874ad9b18194cfbc2" kindref="member">cpu_destroy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CUDA<sp/>backend<sp/>(dlopen<sp/>stubs)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structcuda__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcuda__impl" kindref="compound">cuda_impl</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="structcuda__impl_1a7a17f68ddd44ad2253b3c0b70a53e4e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structcuda__impl_1a7a17f68ddd44ad2253b3c0b70a53e4e6" kindref="member">h_cuda</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>libcuda<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structcuda__impl_1a9cf11521fb3e883109ee50c99faa7843" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><ref refid="structcuda__impl_1a9cf11521fb3e883109ee50c99faa7843" kindref="member">name</ref>[64];</highlight></codeline>
<codeline lineno="55" refid="structcuda__impl_1ac0872251863fea67af3ca65bc624c5a2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><ref refid="structcuda__impl_1ac0872251863fea67af3ca65bc624c5a2" kindref="member">driver</ref>[64];</highlight></codeline>
<codeline lineno="56" refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" refkind="member"><highlight class="normal">}<sp/><ref refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" kindref="member">cuda_impl_t</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" kindref="member">cuda_try_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**out_impl,<sp/><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref><sp/>*out_vt);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1ad556dbc1215b961b5395a7948cd155a8" kindref="member">cuda_caps_c</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1ab170c8ac731059b822713cd35cae51fe" kindref="member">cuda_gemv_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1acca54ad8925643337a1bab31bdf4b4f8" kindref="member">cuda_memcpy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ad163f65fc15c9ca98d2ced5bfead8a06" kindref="member">cuda_destroy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Level<sp/>Zero<sp/>backend<sp/>(dlopen<sp/>stubs)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structze__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structze__impl" kindref="compound">ze_impl</ref><sp/>{</highlight></codeline>
<codeline lineno="67" refid="structze__impl_1a60b05ff0fe4754563c9ca58df405adcc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structze__impl_1a60b05ff0fe4754563c9ca58df405adcc" kindref="member">h_ze</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ze_loader<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structze__impl_1a04b0234eeba1b0a50b302d5bb975faa2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><ref refid="structze__impl_1a04b0234eeba1b0a50b302d5bb975faa2" kindref="member">name</ref>[64];</highlight></codeline>
<codeline lineno="69" refid="structze__impl_1a3658972a66aa2284d3db33abf484f0fd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><ref refid="structze__impl_1a3658972a66aa2284d3db33abf484f0fd" kindref="member">driver</ref>[64];</highlight></codeline>
<codeline lineno="70" refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" refkind="member"><highlight class="normal">}<sp/><ref refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" kindref="member">ze_impl_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" kindref="member">ze_try_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**out_impl,<sp/><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref><sp/>*out_vt);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a324768d76bae88d6bb688d5598d1223a" kindref="member">ze_caps_c</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a57f5ec5d8bd44ff5f04b6f581a33dfde" kindref="member">ze_gemv_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a0e34398da92bf6645c6ee75e561ca526" kindref="member">ze_memcpy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a94018036cde4e553d082aad200a3c4ff" kindref="member">ze_destroy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Utilities<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" kindref="member">try_open_any</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*names);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==============================<sp/>Utilities<sp/>===============================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" kindref="member">try_open_any</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*names)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>names[i];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h<sp/>=<sp/>dlopen(names[i],<sp/>RTLD_LAZY<sp/>|<sp/>RTLD_LOCAL);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="ie__device_8h_1aab258e9f33c12fc1276783d70b8c75a7" refkind="member"><highlight class="normal"><ref refid="ie__device_8h_1a3bcf315cedd0fd154b55784585a9f1ec" kindref="member">ie_device_kind_t</ref><sp/><ref refid="ie__device__common_8c_1aab258e9f33c12fc1276783d70b8c75a7" kindref="member">ie_device_kind_from_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s<sp/>||<sp/>!*s)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[16]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf))<sp/>n<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>buf[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)tolower((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)s[i]);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;cuda&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" kindref="member">IE_DEV_CUDA</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;ze&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fa3a29450e9feabd789030b167dc34fbd7" kindref="member">IE_DEV_ZE</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===============================<sp/>CPU<sp/>Impl<sp/>===============================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="ie__device__common_8c_1a4099e48a20d5155401706f728c99c435" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref><sp/>*<ref refid="ie__device__common_8c_1a4099e48a20d5155401706f728c99c435" kindref="member">cpu_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref><sp/>*p<sp/>=<sp/>(<ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>snprintf(p-&gt;<ref refid="structcpu__impl_1a4479a15d3566dee6e784b5341e9374a8" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p-&gt;<ref refid="structcpu__impl_1a4479a15d3566dee6e784b5341e9374a8" kindref="member">name</ref>),<sp/></highlight><highlight class="stringliteral">&quot;CPU&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="ie__device__common_8c_1a49b8c853d1b641c9402ed5e92d8af962" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a49b8c853d1b641c9402ed5e92d8af962" kindref="member">cpu_caps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>(void)self;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>memset(out,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*out));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" kindref="member">has_gemv_f32</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1a895a919343ce237ea1c3e4231e5c4ca2" kindref="member">has_mem_copy</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1acb89cfdb7c21e1b60d51e45d4faf39a7" kindref="member">has_streams</ref><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>snprintf(out-&gt;<ref refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" kindref="member">name</ref>,<sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(out-&gt;<ref refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" kindref="member">name</ref>),<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CPU&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>snprintf(out-&gt;<ref refid="structie__device__caps_1a771260909362d500182f5d806a415a75" kindref="member">driver</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(out-&gt;<ref refid="structie__device__caps_1a771260909362d500182f5d806a415a75" kindref="member">driver</ref>),<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="ie__device__common_8c_1a4fb9bb01bfbe71517f9df925ba9c93ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a4fb9bb01bfbe71517f9df925ba9c93ec" kindref="member">cpu_gemv_f32</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>(void)self;<sp/>(void)blk_k;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!W<sp/>||<sp/>!x<sp/>||<sp/>!y<sp/>||<sp/>rows<sp/>==<sp/>0<sp/>||<sp/>cols<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="ie__kernels_8h_1a4e112b3396ed21919f404631c1d4d7fb" kindref="member">ie_gemv_f32</ref>(W,<sp/>x,<sp/>y,<sp/>rows,<sp/>cols,<sp/>bias,<sp/>0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="ie__device__common_8c_1a4c7a3b8d7f7279d7680aa68e429e6206" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a4c7a3b8d7f7279d7680aa68e429e6206" kindref="member">cpu_memcpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>(void)self;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dst<sp/>||<sp/>!src<sp/>||<sp/>nbytes<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>memcpy(dst,<sp/>src,<sp/>nbytes);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="ie__device__common_8c_1a94f0164f6cb0f1f874ad9b18194cfbc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a94f0164f6cb0f1f874ad9b18194cfbc2" kindref="member">cpu_destroy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>free(self);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>===============================<sp/>CUDA<sp/>Impl<sp/>==============================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" kindref="member">cuda_try_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**out_impl,<sp/><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref><sp/>*out_vt)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cand_cuda[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;libcuda.so.1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;libcuda.so&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h<sp/>=<sp/><ref refid="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" kindref="member">try_open_any</ref>(cand_cuda);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" kindref="member">cuda_impl_t</ref><sp/>*p<sp/>=<sp/>(<ref refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" kindref="member">cuda_impl_t</ref>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>{<sp/>dlclose(h);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;<sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>p-&gt;<ref refid="structcuda__impl_1a7a17f68ddd44ad2253b3c0b70a53e4e6" kindref="member">h_cuda</ref><sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>snprintf(p-&gt;<ref refid="structcuda__impl_1a9cf11521fb3e883109ee50c99faa7843" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p-&gt;<ref refid="structcuda__impl_1a9cf11521fb3e883109ee50c99faa7843" kindref="member">name</ref>),<sp/></highlight><highlight class="stringliteral">&quot;CUDA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>snprintf(p-&gt;<ref refid="structcuda__impl_1ac0872251863fea67af3ca65bc624c5a2" kindref="member">driver</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p-&gt;<ref refid="structcuda__impl_1ac0872251863fea67af3ca65bc624c5a2" kindref="member">driver</ref>),<sp/></highlight><highlight class="stringliteral">&quot;libcuda&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" kindref="member">caps</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1ad556dbc1215b961b5395a7948cd155a8" kindref="member">cuda_caps_c</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" kindref="member">gemv_f32</ref><sp/>=<sp/><ref refid="ie__device__common_8c_1ab170c8ac731059b822713cd35cae51fe" kindref="member">cuda_gemv_c</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" kindref="member">memcpy</ref><sp/><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1acca54ad8925643337a1bab31bdf4b4f8" kindref="member">cuda_memcpy_c</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" kindref="member">destroy</ref><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1ad163f65fc15c9ca98d2ced5bfead8a06" kindref="member">cuda_destroy_c</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>*out_impl<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="ie__device__common_8c_1ad556dbc1215b961b5395a7948cd155a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ad556dbc1215b961b5395a7948cd155a8" kindref="member">cuda_caps_c</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" kindref="member">cuda_impl_t</ref><sp/>*ci<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" kindref="member">cuda_impl_t</ref>*)self;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>memset(out,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*out));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" kindref="member">has_gemv_f32</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1a895a919343ce237ea1c3e4231e5c4ca2" kindref="member">has_mem_copy</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1acb89cfdb7c21e1b60d51e45d4faf39a7" kindref="member">has_streams</ref><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>snprintf(out-&gt;<ref refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" kindref="member">name</ref>,<sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(out-&gt;<ref refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" kindref="member">name</ref>),<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ci-&gt;<ref refid="structcuda__impl_1a9cf11521fb3e883109ee50c99faa7843" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>snprintf(out-&gt;<ref refid="structie__device__caps_1a771260909362d500182f5d806a415a75" kindref="member">driver</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(out-&gt;<ref refid="structie__device__caps_1a771260909362d500182f5d806a415a75" kindref="member">driver</ref>),<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ci-&gt;<ref refid="structcuda__impl_1ac0872251863fea67af3ca65bc624c5a2" kindref="member">driver</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="ie__device__common_8c_1ab170c8ac731059b822713cd35cae51fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ab170c8ac731059b822713cd35cae51fe" kindref="member">cuda_gemv_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>(void)self;<sp/>(void)W;<sp/>(void)x;<sp/>(void)y;<sp/>(void)rows;<sp/>(void)cols;<sp/>(void)bias;<sp/>(void)blk_k;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="ie__device__common_8c_1acca54ad8925643337a1bab31bdf4b4f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1acca54ad8925643337a1bab31bdf4b4f8" kindref="member">cuda_memcpy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>(void)self;<sp/>(void)dst;<sp/>(void)src;<sp/>(void)n;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="ie__device__common_8c_1ad163f65fc15c9ca98d2ced5bfead8a06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ad163f65fc15c9ca98d2ced5bfead8a06" kindref="member">cuda_destroy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" kindref="member">cuda_impl_t</ref><sp/>*ci<sp/>=<sp/>(<ref refid="ie__device__common_8c_1a43cbe85c0b3804d5dddb4a8be4706076" kindref="member">cuda_impl_t</ref>*)self;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci-&gt;<ref refid="structcuda__impl_1a7a17f68ddd44ad2253b3c0b70a53e4e6" kindref="member">h_cuda</ref>)<sp/>dlclose(ci-&gt;<ref refid="structcuda__impl_1a7a17f68ddd44ad2253b3c0b70a53e4e6" kindref="member">h_cuda</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>free(ci);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==============================<sp/>Level<sp/>Zero<sp/>==============================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" kindref="member">ze_try_create</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**out_impl,<sp/><ref refid="ie__device__common_8c_1a3d0ad1099c7a934c1f58c4f78fed855a" kindref="member">ie_device_vtbl_t</ref><sp/>*out_vt)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cand_ze[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;libze_loader.so.1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;libze_loader.so&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*h<sp/>=<sp/><ref refid="ie__device__common_8c_1a5b5f48338cddd2bed011b4c2384bac25" kindref="member">try_open_any</ref>(cand_ze);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" kindref="member">ze_impl_t</ref><sp/>*p<sp/>=<sp/>(<ref refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" kindref="member">ze_impl_t</ref>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>{<sp/>dlclose(h);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;<sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>p-&gt;<ref refid="structze__impl_1a60b05ff0fe4754563c9ca58df405adcc" kindref="member">h_ze</ref><sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>snprintf(p-&gt;<ref refid="structze__impl_1a04b0234eeba1b0a50b302d5bb975faa2" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p-&gt;<ref refid="structze__impl_1a04b0234eeba1b0a50b302d5bb975faa2" kindref="member">name</ref>),<sp/></highlight><highlight class="stringliteral">&quot;LevelZero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>snprintf(p-&gt;<ref refid="structze__impl_1a3658972a66aa2284d3db33abf484f0fd" kindref="member">driver</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(p-&gt;<ref refid="structze__impl_1a3658972a66aa2284d3db33abf484f0fd" kindref="member">driver</ref>),<sp/></highlight><highlight class="stringliteral">&quot;ze_loader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" kindref="member">caps</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1a324768d76bae88d6bb688d5598d1223a" kindref="member">ze_caps_c</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" kindref="member">gemv_f32</ref><sp/>=<sp/><ref refid="ie__device__common_8c_1a57f5ec5d8bd44ff5f04b6f581a33dfde" kindref="member">ze_gemv_c</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" kindref="member">memcpy</ref><sp/><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1a0e34398da92bf6645c6ee75e561ca526" kindref="member">ze_memcpy_c</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>out_vt-&gt;<ref refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" kindref="member">destroy</ref><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1a94018036cde4e553d082aad200a3c4ff" kindref="member">ze_destroy_c</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>*out_impl<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="ie__device__common_8c_1a324768d76bae88d6bb688d5598d1223a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a324768d76bae88d6bb688d5598d1223a" kindref="member">ze_caps_c</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" kindref="member">ze_impl_t</ref><sp/>*zi<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" kindref="member">ze_impl_t</ref>*)self;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>memset(out,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*out));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" kindref="member">has_gemv_f32</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1a895a919343ce237ea1c3e4231e5c4ca2" kindref="member">has_mem_copy</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>out-&gt;<ref refid="structie__device__caps_1acb89cfdb7c21e1b60d51e45d4faf39a7" kindref="member">has_streams</ref><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>snprintf(out-&gt;<ref refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" kindref="member">name</ref>,<sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(out-&gt;<ref refid="structie__device__caps_1a8077e475ea6ed7a265e255add0454957" kindref="member">name</ref>),<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>zi-&gt;<ref refid="structze__impl_1a04b0234eeba1b0a50b302d5bb975faa2" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>snprintf(out-&gt;<ref refid="structie__device__caps_1a771260909362d500182f5d806a415a75" kindref="member">driver</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(out-&gt;<ref refid="structie__device__caps_1a771260909362d500182f5d806a415a75" kindref="member">driver</ref>),<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>zi-&gt;<ref refid="structze__impl_1a3658972a66aa2284d3db33abf484f0fd" kindref="member">driver</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="ie__device__common_8c_1a57f5ec5d8bd44ff5f04b6f581a33dfde" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a57f5ec5d8bd44ff5f04b6f581a33dfde" kindref="member">ze_gemv_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>(void)self;<sp/>(void)W;<sp/>(void)x;<sp/>(void)y;<sp/>(void)rows;<sp/>(void)cols;<sp/>(void)bias;<sp/>(void)blk_k;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="ie__device__common_8c_1a0e34398da92bf6645c6ee75e561ca526" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a0e34398da92bf6645c6ee75e561ca526" kindref="member">ze_memcpy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>(void)self;<sp/>(void)dst;<sp/>(void)src;<sp/>(void)n;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="ie__device__common_8c_1a94018036cde4e553d082aad200a3c4ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a94018036cde4e553d082aad200a3c4ff" kindref="member">ze_destroy_c</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*self)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" kindref="member">ze_impl_t</ref><sp/>*zi<sp/>=<sp/>(<ref refid="ie__device__common_8c_1a20f94310959e31a6e7f98681788e80ce" kindref="member">ze_impl_t</ref>*)self;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zi-&gt;<ref refid="structze__impl_1a60b05ff0fe4754563c9ca58df405adcc" kindref="member">h_ze</ref>)<sp/>dlclose(zi-&gt;<ref refid="structze__impl_1a60b05ff0fe4754563c9ca58df405adcc" kindref="member">h_ze</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>free(zi);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==============================<sp/>Public<sp/>API<sp/>==============================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a3e42fcc4b9579a9bf14520cb1afe733b" kindref="member">ie_device_create</ref>(<ref refid="ie__device_8h_1a3bcf315cedd0fd154b55784585a9f1ec" kindref="member">ie_device_kind_t</ref><sp/>kind,<sp/><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>**out_dev)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out_dev)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*d<sp/>=<sp/>(<ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*d));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kind<sp/>==<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" kindref="member">IE_DEV_CUDA</ref>)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="ie__device__common_8c_1ae4ac15a3b8fea25568b8cdeb2cd781fe" kindref="member">cuda_try_create</ref>(&amp;d-&gt;<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref>,<sp/>&amp;d-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kind<sp/>==<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fa3a29450e9feabd789030b167dc34fbd7" kindref="member">IE_DEV_ZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="ie__device__common_8c_1a6877d362577444879b41090af23950d6" kindref="member">ze_try_create</ref>(&amp;d-&gt;<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref>,<sp/>&amp;d-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fallback<sp/>to<sp/>CPU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ie__device__common_8c_1ad0e84ba338f0896e7f95f359de2d8765" kindref="member">cpu_impl_t</ref><sp/>*ci<sp/>=<sp/><ref refid="ie__device__common_8c_1a4099e48a20d5155401706f728c99c435" kindref="member">cpu_new</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ci)<sp/>{<sp/>free(d);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;<sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref><sp/>=<sp/>ci;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" kindref="member">caps</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1a49b8c853d1b641c9402ed5e92d8af962" kindref="member">cpu_caps</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" kindref="member">gemv_f32</ref><sp/>=<sp/><ref refid="ie__device__common_8c_1a4fb9bb01bfbe71517f9df925ba9c93ec" kindref="member">cpu_gemv_f32</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" kindref="member">memcpy</ref><sp/><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1a4c7a3b8d7f7279d7680aa68e429e6206" kindref="member">cpu_memcpy</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" kindref="member">destroy</ref><sp/><sp/>=<sp/><ref refid="ie__device__common_8c_1a94f0164f6cb0f1f874ad9b18194cfbc2" kindref="member">cpu_destroy</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" kindref="member">kind</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;<ref refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" kindref="member">kind</ref><sp/>=<sp/>kind;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>*out_dev<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="ie__device_8h_1a8f8a88a7dd6a58749275d2f3dea9a0ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1a8f8a88a7dd6a58749275d2f3dea9a0ab" kindref="member">ie_device_destroy</ref>(<ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*dev)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" kindref="member">destroy</ref>)<sp/>dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1a646d8353c3ebf1ba47f4a4ac37efac33" kindref="member">destroy</ref>(dev-&gt;<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>free(dev);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="ie__device_8h_1aa55efab6527903fcc61f787ebc05c1e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1aa55efab6527903fcc61f787ebc05c1e3" kindref="member">ie_device_caps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*dev,<sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>*out_caps)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev<sp/>||<sp/>!out_caps)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" kindref="member">caps</ref><sp/>?<sp/>dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1a44354d7416675f3c11452b5767d392ff" kindref="member">caps</ref>(dev-&gt;<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref>,<sp/>out_caps)<sp/>:<sp/>-2;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="ie__device_8h_1af9a99d92974f072775057b5def388b77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1af9a99d92974f072775057b5def388b77" kindref="member">ie_device_gemv_f32</ref>(<ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*bias,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>blk_k)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev<sp/>||<sp/>!dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" kindref="member">gemv_f32</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1af53f74e97e8a3331b3c9edd24a64e668" kindref="member">gemv_f32</ref>(dev-&gt;<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref>,<sp/>W,<sp/>x,<sp/>y,<sp/>rows,<sp/>cols,<sp/>bias,<sp/>blk_k);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>GPU<sp/>backend<sp/>is<sp/>stubbed,<sp/>transparently<sp/>fall<sp/>back<sp/>to<sp/>CPU<sp/>once.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" kindref="member">kind</ref><sp/>!=<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*cpu<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ie__device__common_8c_1a3e42fcc4b9579a9bf14520cb1afe733b" kindref="member">ie_device_create</ref>(<ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>,<sp/>&amp;cpu)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc2<sp/>=<sp/><ref refid="ie__device__common_8c_1af9a99d92974f072775057b5def388b77" kindref="member">ie_device_gemv_f32</ref>(cpu,<sp/>W,<sp/>x,<sp/>y,<sp/>rows,<sp/>cols,<sp/>bias,<sp/>blk_k);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ie__device__common_8c_1a8f8a88a7dd6a58749275d2f3dea9a0ab" kindref="member">ie_device_destroy</ref>(cpu);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc2;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="ie__device_8h_1ad8fe47f93fa5e18c7cf07a153f1de2fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ie__device__common_8c_1ad8fe47f93fa5e18c7cf07a153f1de2fb" kindref="member">ie_device_memcpy</ref>(<ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dev<sp/>||<sp/>!dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" kindref="member">memcpy</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>dev-&gt;<ref refid="structie__device_1aeff992a5f5e1b29e4648d630565b6c71" kindref="member">vt</ref>.<ref refid="structie__device__vtbl_1ad1dd16848b3443345765eba0a865a1b1" kindref="member">memcpy</ref>(dev-&gt;<ref refid="structie__device_1a909547212afb6612e8d4e0c2fbeaa768" kindref="member">impl</ref>,<sp/>dst,<sp/>src,<sp/>nbytes);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structie__device_1a155ab991692fdcd2c49275a73416dfba" kindref="member">kind</ref><sp/>!=<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*cpu<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ie__device__common_8c_1a3e42fcc4b9579a9bf14520cb1afe733b" kindref="member">ie_device_create</ref>(<ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>,<sp/>&amp;cpu)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc2<sp/>=<sp/><ref refid="ie__device__common_8c_1ad8fe47f93fa5e18c7cf07a153f1de2fb" kindref="member">ie_device_memcpy</ref>(cpu,<sp/>dst,<sp/>src,<sp/>nbytes);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ie__device__common_8c_1a8f8a88a7dd6a58749275d2f3dea9a0ab" kindref="member">ie_device_destroy</ref>(cpu);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc2;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="engine/src/devices/ie_device_common.c"/>
  </compounddef>
</doxygen>
