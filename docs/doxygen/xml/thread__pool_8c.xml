<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="thread__pool_8c" kind="file" language="C++">
    <compoundname>thread_pool.c</compoundname>
    <includes refid="ie__threadpool_8h" local="yes">ie_threadpool.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ie_threadpool.h</label>
        <link refid="ie__threadpool_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>engine/src/opt/thread_pool.c</label>
        <link refid="thread__pool_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pthread.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structie__threadpool" prot="public">ie_threadpool</innerclass>
    <innerclass refid="structie__worker__arg__t" prot="public">ie_worker_arg_t</innerclass>
    <innerclass refid="structie__task__arg__t" prot="public">ie_task_arg_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="thread__pool_8c_1a369266c24eacffb87046522897a570d5" prot="public" static="no">
        <name>_GNU_SOURCE</name>
        <initializer>/* for pthread_setaffinity_np on glibc */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/opt/thread_pool.c" line="14" column="9" bodyfile="engine/src/opt/thread_pool.c" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="thread__pool_8c_1a5449dd0e500032916ba5574c066d01fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ie_set_affinity</definition>
        <argsstring>(const char *policy, unsigned tidx, unsigned nth, int use_affinity)</argsstring>
        <name>ie_set_affinity</name>
        <param>
          <type>const char *</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>tidx</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>nth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_affinity</declname>
        </param>
        <briefdescription>
<para>Optionally set the current thread&apos;s CPU affinity (Linux only). </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>use_affinity</computeroutput> is 0 or not Linux, this function is a no-op.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>&quot;auto&quot;, &quot;compact&quot;, or &quot;scatter&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tidx</parametername>
</parameternamelist>
<parameterdescription>
<para>Worker index [0, nth). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nth</parametername>
</parameternamelist>
<parameterdescription>
<para>Total number of workers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_affinity</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-zero to actually apply affinity (Linux only). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/opt/thread_pool.c" line="57" column="13" bodyfile="engine/src/opt/thread_pool.c" bodystart="57" bodyend="82"/>
        <referencedby refid="thread__pool_8c_1a2359598b57e5b606af0406bb0e2fba98" compoundref="thread__pool_8c" startline="182" endline="192">ie_task_main</referencedby>
        <referencedby refid="thread__pool_8c_1a76c9a7c2502624899ae3cb5d46c04f7e" compoundref="thread__pool_8c" startline="99" endline="109">ie_worker_main</referencedby>
      </memberdef>
      <memberdef kind="function" id="thread__pool_8c_1a76c9a7c2502624899ae3cb5d46c04f7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * ie_worker_main</definition>
        <argsstring>(void *arg)</argsstring>
        <name>ie_worker_main</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Long-lived worker entry. </para>
        </briefdescription>
        <detaileddescription>
<para>Currently idle placeholder.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <computeroutput><ref refid="structie__worker__arg__t" kindref="compound">ie_worker_arg_t</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/opt/thread_pool.c" line="99" column="13" bodyfile="engine/src/opt/thread_pool.c" bodystart="99" bodyend="109"/>
        <references refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" compoundref="thread__pool_8c" startline="36">ie_threadpool::affinity</references>
        <references refid="thread__pool_8c_1a5449dd0e500032916ba5574c066d01fe" compoundref="thread__pool_8c" startline="57" endline="82">ie_set_affinity</references>
        <references refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" compoundref="thread__pool_8c" startline="35">ie_threadpool::nth</references>
        <references refid="structie__worker__arg__t_1aafb928d17efdf95af0fdcde45c4592f5" compoundref="thread__pool_8c" startline="90">ie_worker_arg_t::tidx</references>
        <references refid="structie__worker__arg__t_1a2d5b690772e7feda6de890a2f06cb033" compoundref="thread__pool_8c" startline="89">ie_worker_arg_t::tp</references>
        <references refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" compoundref="thread__pool_8c" startline="37">ie_threadpool::use_affinity</references>
        <referencedby refid="ie__threadpool_8h_1ac8f8095fb1ec189946232325a3fce3a2" compoundref="thread__pool_8c" startline="115" endline="144">ie_tp_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="thread__pool_8c_1ac8f8095fb1ec189946232325a3fce3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref> *</type>
        <definition>ie_threadpool_t * ie_tp_create</definition>
        <argsstring>(unsigned nth, const char *affinity)</argsstring>
        <name>ie_tp_create</name>
        <param>
          <type>unsigned</type>
          <declname>nth</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>affinity</declname>
        </param>
        <briefdescription>
<para>Create a thread pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nth</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired number of worker threads (&gt;= 1). Values &lt; 1 are clamped to 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>affinity</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional policy string: &quot;auto&quot;, &quot;compact&quot;, or &quot;scatter&quot;. The value is advisory; non-Linux builds ignore affinity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Newly created thread-pool handle, or NULL on allocation failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/opt/thread_pool.c" line="115" column="17" bodyfile="engine/src/opt/thread_pool.c" bodystart="115" bodyend="144"/>
        <references refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" compoundref="thread__pool_8c" startline="36">ie_threadpool::affinity</references>
        <references refid="thread__pool_8c_1a76c9a7c2502624899ae3cb5d46c04f7e" compoundref="thread__pool_8c" startline="99" endline="109">ie_worker_main</references>
        <references refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" compoundref="thread__pool_8c" startline="35">ie_threadpool::nth</references>
        <references refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" compoundref="thread__pool_8c" startline="40">ie_threadpool::threads</references>
        <references refid="structie__worker__arg__t_1aafb928d17efdf95af0fdcde45c4592f5" compoundref="thread__pool_8c" startline="90">ie_worker_arg_t::tidx</references>
        <references refid="structie__worker__arg__t_1a2d5b690772e7feda6de890a2f06cb033" compoundref="thread__pool_8c" startline="89">ie_worker_arg_t::tp</references>
        <references refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" compoundref="thread__pool_8c" startline="37">ie_threadpool::use_affinity</references>
        <referencedby refid="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__threadpool_8c" startline="69" endline="126">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="thread__pool_8c_1af7e3e65d6ae98476348b706907d54b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_tp_destroy</definition>
        <argsstring>(ie_threadpool_t *h)</argsstring>
        <name>ie_tp_destroy</name>
        <param>
          <type><ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref> *</type>
          <declname>tp</declname>
          <defname>h</defname>
        </param>
        <briefdescription>
<para>Destroy a thread pool and join all worker threads. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread-pool handle (NULL allowed; no-op). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/opt/thread_pool.c" line="146" column="6" bodyfile="engine/src/opt/thread_pool.c" bodystart="146" bodyend="157"/>
        <references refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" compoundref="thread__pool_8c" startline="35">ie_threadpool::nth</references>
        <references refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" compoundref="thread__pool_8c" startline="40">ie_threadpool::threads</references>
        <referencedby refid="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__threadpool_8c" startline="69" endline="126">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="thread__pool_8c_1a2359598b57e5b606af0406bb0e2fba98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * ie_task_main</definition>
        <argsstring>(void *arg)</argsstring>
        <name>ie_task_main</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Task thread trampoline that applies optional affinity and executes a chunk. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <computeroutput><ref refid="structie__task__arg__t" kindref="compound">ie_task_arg_t</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/opt/thread_pool.c" line="182" column="13" bodyfile="engine/src/opt/thread_pool.c" bodystart="182" bodyend="192"/>
        <references refid="structie__task__arg__t_1a3392b3ce65fc59698bec0d92ec94ba31" compoundref="thread__pool_8c" startline="164">ie_task_arg_t::affinity</references>
        <references refid="structie__task__arg__t_1a1d5b2ad9724bb08fba602b3cb4ad28e8" compoundref="thread__pool_8c" startline="172">ie_task_arg_t::body</references>
        <references refid="structie__task__arg__t_1ad0a63b137b85c1b50a797cd54204fd69" compoundref="thread__pool_8c" startline="173">ie_task_arg_t::ctx</references>
        <references refid="structie__task__arg__t_1a68e089a47b157f9398b8059269d6b95d" compoundref="thread__pool_8c" startline="170">ie_task_arg_t::end</references>
        <references refid="thread__pool_8c_1a5449dd0e500032916ba5574c066d01fe" compoundref="thread__pool_8c" startline="57" endline="82">ie_set_affinity</references>
        <references refid="structie__task__arg__t_1aa687c7daa39cacca34ab74ff58f433d5" compoundref="thread__pool_8c" startline="167">ie_task_arg_t::nth_map</references>
        <references refid="structie__task__arg__t_1afee2b8f07881d75ea8829a1f54757c5e" compoundref="thread__pool_8c" startline="169">ie_task_arg_t::start</references>
        <references refid="structie__task__arg__t_1a67e8d3401edad2240d6c2f4d398fc6d0" compoundref="thread__pool_8c" startline="166">ie_task_arg_t::tidx_map</references>
        <references refid="structie__task__arg__t_1a9d90ceaa82f746983034dd7bc034bc26" compoundref="thread__pool_8c" startline="165">ie_task_arg_t::use_affinity</references>
        <referencedby refid="ie__threadpool_8h_1ac3dd114f8b47a5fe0d22f8107a51e90f" compoundref="thread__pool_8c" startline="194" endline="262">ie_tp_parallel_for</referencedby>
      </memberdef>
      <memberdef kind="function" id="thread__pool_8c_1ab0bb2b90df0908183de34784810a9386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_tp_parallel_for</definition>
        <argsstring>(ie_threadpool_t *h, unsigned n, unsigned grainsize, ie_tp_for_body_fn body_fn, void *ctx)</argsstring>
        <name>ie_tp_parallel_for</name>
        <param>
          <type><ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref> *</type>
          <declname>tp</declname>
          <defname>h</defname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>grainsize</declname>
        </param>
        <param>
          <type><ref refid="ie__threadpool_8h_1af0040a9e6d528cabc1c7797542b85693" kindref="member">ie_tp_for_body_fn</ref></type>
          <declname>body_fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Execute a synchronous parallel-for over <computeroutput>n</computeroutput> iterations. </para>
        </briefdescription>
        <detaileddescription>
<para>The iteration space <computeroutput>[0, n)</computeroutput> is partitioned into contiguous chunks. If <computeroutput>grainsize &gt; 0</computeroutput>, each chunk will be at least <computeroutput>grainsize</computeroutput> iterations (except possibly the last). If <computeroutput>grainsize == 0</computeroutput>, the function partitions the space as evenly as possible across the pool&apos;s workers.</para>
<para>On non-Linux systems (or when <computeroutput>IE_TP_USE_AFFINITY != 1</computeroutput>), no CPU affinity is applied. On Linux with <computeroutput>IE_TP_USE_AFFINITY=1</computeroutput>, worker threads may bind to specific CPUs using the policy provided at creation (&quot;auto&quot;/&quot;compact&quot;/&quot;scatter&quot;).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread-pool handle (may be NULL for single-threaded). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations in the global range <computeroutput>[0, n)</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grainsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum chunk size (use 0 for auto). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function called for each chunk. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque user pointer passed to <computeroutput>body_fn</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/opt/thread_pool.c" line="194" column="6" bodyfile="engine/src/opt/thread_pool.c" bodystart="194" bodyend="262"/>
        <references refid="structie__task__arg__t_1a3392b3ce65fc59698bec0d92ec94ba31" compoundref="thread__pool_8c" startline="164">ie_task_arg_t::affinity</references>
        <references refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" compoundref="thread__pool_8c" startline="36">ie_threadpool::affinity</references>
        <references refid="structie__task__arg__t_1a1d5b2ad9724bb08fba602b3cb4ad28e8" compoundref="thread__pool_8c" startline="172">ie_task_arg_t::body</references>
        <references refid="structie__task__arg__t_1ad0a63b137b85c1b50a797cd54204fd69" compoundref="thread__pool_8c" startline="173">ie_task_arg_t::ctx</references>
        <references refid="structie__task__arg__t_1a68e089a47b157f9398b8059269d6b95d" compoundref="thread__pool_8c" startline="170">ie_task_arg_t::end</references>
        <references refid="thread__pool_8c_1a2359598b57e5b606af0406bb0e2fba98" compoundref="thread__pool_8c" startline="182" endline="192">ie_task_main</references>
        <references refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" compoundref="thread__pool_8c" startline="35">ie_threadpool::nth</references>
        <references refid="structie__task__arg__t_1aa687c7daa39cacca34ab74ff58f433d5" compoundref="thread__pool_8c" startline="167">ie_task_arg_t::nth_map</references>
        <references refid="structie__task__arg__t_1afee2b8f07881d75ea8829a1f54757c5e" compoundref="thread__pool_8c" startline="169">ie_task_arg_t::start</references>
        <references refid="structie__task__arg__t_1a67e8d3401edad2240d6c2f4d398fc6d0" compoundref="thread__pool_8c" startline="166">ie_task_arg_t::tidx_map</references>
        <references refid="structie__task__arg__t_1a9d90ceaa82f746983034dd7bc034bc26" compoundref="thread__pool_8c" startline="165">ie_task_arg_t::use_affinity</references>
        <references refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" compoundref="thread__pool_8c" startline="37">ie_threadpool::use_affinity</references>
        <referencedby refid="test__threadpool_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__threadpool_8c" startline="69" endline="126">main</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Minimal thread pool with synchronous parallel-for and optional Linux CPU affinity. </para>
    </briefdescription>
    <detaileddescription>
<para>Design notes:<itemizedlist>
<listitem><para>The pool owns a set of long-lived worker threads created at <computeroutput><ref refid="thread__pool_8c_1ac8f8095fb1ec189946232325a3fce3a2" kindref="member">ie_tp_create()</ref></computeroutput>. (They are idle placeholders in this baseline.)</para>
</listitem><listitem><para><computeroutput><ref refid="thread__pool_8c_1ab0bb2b90df0908183de34784810a9386" kindref="member">ie_tp_parallel_for()</ref></computeroutput> launches one short-lived task thread <bold>per chunk</bold>, so the entire [0, n) range is always covered even when <computeroutput>nchunks &gt; nth</computeroutput>.</para>
</listitem><listitem><para>Affinity (Linux only) is applied using a modulo mapping so chunks greater than the worker count still get a stable CPU choice. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="thread__pool_8c_1a369266c24eacffb87046522897a570d5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_GNU_SOURCE<sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>pthread_setaffinity_np<sp/>on<sp/>glibc<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__threadpool_8h" kindref="compound">ie_threadpool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__linux__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sched.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Internal<sp/>data<sp/>types<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="structie__threadpool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref><sp/>{</highlight></codeline>
<codeline lineno="35" refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36" refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37" refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" kindref="member">use_affinity</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Long-lived<sp/>worker<sp/>threads<sp/>(idle<sp/>placeholders<sp/>in<sp/>this<sp/>minimal<sp/>impl).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" refkind="member"><highlight class="normal"><sp/><sp/>pthread_t<sp/>*<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Affinity<sp/>helper<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="thread__pool_8c_1a5449dd0e500032916ba5574c066d01fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="thread__pool_8c_1a5449dd0e500032916ba5574c066d01fe" kindref="member">ie_set_affinity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*policy,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>tidx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_affinity)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__linux__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_affinity<sp/>||<sp/>!policy)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>cpu_set_t<sp/>set;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>CPU_ZERO(&amp;set);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ncpu<sp/>=<sp/>sysconf(_SC_NPROCESSORS_ONLN);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ncpu<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cpu<sp/>=<sp/>tidx<sp/>%<sp/>(unsigned)ncpu;<sp/></highlight><highlight class="comment">/*<sp/>default<sp/>&quot;auto&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(policy,<sp/></highlight><highlight class="stringliteral">&quot;compact&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu<sp/>=<sp/>tidx<sp/>%<sp/>(unsigned)ncpu;<sp/></highlight><highlight class="comment">/*<sp/>fill<sp/>CPUs<sp/>from<sp/>0..<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(policy,<sp/></highlight><highlight class="stringliteral">&quot;scatter&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>spread<sp/>across<sp/>the<sp/>machine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>stride<sp/>=<sp/>(unsigned)(ncpu<sp/>/<sp/>(nth<sp/>?<sp/>nth<sp/>:<sp/>1))<sp/>+<sp/>1u;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu<sp/>=<sp/>(unsigned)((tidx<sp/>*<sp/>stride)<sp/>%<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)ncpu);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>else<sp/>&quot;auto&quot;:<sp/>keep<sp/>default<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>CPU_SET(cpu,<sp/>&amp;set);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>(void)pthread_setaffinity_np(pthread_self(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(set),<sp/>&amp;set);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>(void)policy;<sp/>(void)tidx;<sp/>(void)nth;<sp/>(void)use_affinity;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Worker<sp/>trampoline<sp/>(long-lived,<sp/>idle)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structie__worker__arg__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="89" refid="structie__worker__arg__t_1a2d5b690772e7feda6de890a2f06cb033" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref><sp/>*<ref refid="structie__worker__arg__t_1a2d5b690772e7feda6de890a2f06cb033" kindref="member">tp</ref>;</highlight></codeline>
<codeline lineno="90" refid="structie__worker__arg__t_1aafb928d17efdf95af0fdcde45c4592f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structie__worker__arg__t_1aafb928d17efdf95af0fdcde45c4592f5" kindref="member">tidx</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}<sp/><ref refid="structie__worker__arg__t" kindref="compound">ie_worker_arg_t</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="thread__pool_8c_1a76c9a7c2502624899ae3cb5d46c04f7e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="thread__pool_8c_1a76c9a7c2502624899ae3cb5d46c04f7e" kindref="member">ie_worker_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="structie__worker__arg__t" kindref="compound">ie_worker_arg_t</ref><sp/>*wa<sp/>=<sp/>(<ref refid="structie__worker__arg__t" kindref="compound">ie_worker_arg_t</ref>*)arg;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref><sp/>*tp<sp/>=<sp/>wa-&gt;<ref refid="structie__worker__arg__t_1a2d5b690772e7feda6de890a2f06cb033" kindref="member">tp</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>tidx<sp/>=<sp/>wa-&gt;<ref refid="structie__worker__arg__t_1aafb928d17efdf95af0fdcde45c4592f5" kindref="member">tidx</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="thread__pool_8c_1a5449dd0e500032916ba5574c066d01fe" kindref="member">ie_set_affinity</ref>(tp-&gt;<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref>,<sp/>tidx,<sp/>tp-&gt;<ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref>,<sp/>tp-&gt;<ref refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" kindref="member">use_affinity</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Minimal<sp/>design:<sp/>no<sp/>persistent<sp/>work<sp/>queue<sp/>in<sp/>this<sp/>baseline.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>free(wa);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Public<sp/>API<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="ie__threadpool_8h_1ac8f8095fb1ec189946232325a3fce3a2" refkind="member"><highlight class="normal"><ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref>*<sp/><ref refid="thread__pool_8c_1ac8f8095fb1ec189946232325a3fce3a2" kindref="member">ie_tp_create</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref><sp/>&lt;<sp/>1)<sp/><ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref><sp/>*tp<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*tp));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>tp-&gt;<ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref><sp/>=<sp/><ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>tp-&gt;<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref><sp/>=<sp/>(<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref><sp/>&amp;&amp;<sp/>*<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref>)<sp/>?<sp/><ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__linux__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*env<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;IE_TP_USE_AFFINITY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>tp-&gt;<ref refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" kindref="member">use_affinity</ref><sp/>=<sp/>(env<sp/>&amp;&amp;<sp/>strcmp(env,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>tp-&gt;<ref refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" kindref="member">use_affinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Spawn<sp/>long-lived<sp/>idle<sp/>workers<sp/>(not<sp/>strictly<sp/>required<sp/>for<sp/>the<sp/>baseline).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>tp-&gt;<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref><sp/>=<sp/>(pthread_t*)calloc(<ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pthread_t));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tp-&gt;<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref>)<sp/>{<sp/>free(tp);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structie__worker__arg__t" kindref="compound">ie_worker_arg_t</ref><sp/>*wa<sp/>=<sp/>(<ref refid="structie__worker__arg__t" kindref="compound">ie_worker_arg_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*wa));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wa)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>wa-&gt;<ref refid="structie__worker__arg__t_1a2d5b690772e7feda6de890a2f06cb033" kindref="member">tp</ref><sp/>=<sp/>tp;<sp/>wa-&gt;<ref refid="structie__worker__arg__t_1aafb928d17efdf95af0fdcde45c4592f5" kindref="member">tidx</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;tp-&gt;<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref>[i],<sp/>NULL,<sp/><ref refid="thread__pool_8c_1a76c9a7c2502624899ae3cb5d46c04f7e" kindref="member">ie_worker_main</ref>,<sp/>wa)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(wa);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref>*)tp;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="ie__threadpool_8h_1ab205aaf0e68cb61f3ac782c02aa5d475" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="thread__pool_8c_1af7e3e65d6ae98476348b706907d54b33" kindref="member">ie_tp_destroy</ref>(<ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref><sp/>*h)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref><sp/>*tp<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref>*)h;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tp-&gt;<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tp-&gt;<ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tp-&gt;<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref>[i])<sp/>pthread_join(tp-&gt;<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref>[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>free(tp-&gt;<ref refid="structie__threadpool_1a951e09270eaf6eba31e75ec4aed170b7" kindref="member">threads</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>free(tp);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Synchronous<sp/>parallel-for<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structie__task__arg__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164" refid="structie__task__arg__t_1a3392b3ce65fc59698bec0d92ec94ba31" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structie__task__arg__t_1a3392b3ce65fc59698bec0d92ec94ba31" kindref="member">affinity</ref>;</highlight></codeline>
<codeline lineno="165" refid="structie__task__arg__t_1a9d90ceaa82f746983034dd7bc034bc26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structie__task__arg__t_1a9d90ceaa82f746983034dd7bc034bc26" kindref="member">use_affinity</ref>;</highlight></codeline>
<codeline lineno="166" refid="structie__task__arg__t_1a67e8d3401edad2240d6c2f4d398fc6d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structie__task__arg__t_1a67e8d3401edad2240d6c2f4d398fc6d0" kindref="member">tidx_map</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>mapped<sp/>thread<sp/>index<sp/>for<sp/>affinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structie__task__arg__t_1aa687c7daa39cacca34ab74ff58f433d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structie__task__arg__t_1aa687c7daa39cacca34ab74ff58f433d5" kindref="member">nth_map</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mapped<sp/>pool<sp/>size<sp/>for<sp/>affinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="structie__task__arg__t_1afee2b8f07881d75ea8829a1f54757c5e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structie__task__arg__t_1afee2b8f07881d75ea8829a1f54757c5e" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="170" refid="structie__task__arg__t_1a68e089a47b157f9398b8059269d6b95d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structie__task__arg__t_1a68e089a47b157f9398b8059269d6b95d" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="structie__task__arg__t_1a1d5b2ad9724bb08fba602b3cb4ad28e8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="ie__threadpool_8h_1af0040a9e6d528cabc1c7797542b85693" kindref="member">ie_tp_for_body_fn</ref><sp/><ref refid="structie__task__arg__t_1a1d5b2ad9724bb08fba602b3cb4ad28e8" kindref="member">body</ref>;</highlight></codeline>
<codeline lineno="173" refid="structie__task__arg__t_1ad0a63b137b85c1b50a797cd54204fd69" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structie__task__arg__t_1ad0a63b137b85c1b50a797cd54204fd69" kindref="member">ctx</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}<sp/><ref refid="structie__task__arg__t" kindref="compound">ie_task_arg_t</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="thread__pool_8c_1a2359598b57e5b606af0406bb0e2fba98" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="thread__pool_8c_1a2359598b57e5b606af0406bb0e2fba98" kindref="member">ie_task_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="structie__task__arg__t" kindref="compound">ie_task_arg_t</ref><sp/>*ta<sp/>=<sp/>(<ref refid="structie__task__arg__t" kindref="compound">ie_task_arg_t</ref>*)arg;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="thread__pool_8c_1a5449dd0e500032916ba5574c066d01fe" kindref="member">ie_set_affinity</ref>(ta-&gt;<ref refid="structie__task__arg__t_1a3392b3ce65fc59698bec0d92ec94ba31" kindref="member">affinity</ref>,<sp/>ta-&gt;<ref refid="structie__task__arg__t_1a67e8d3401edad2240d6c2f4d398fc6d0" kindref="member">tidx_map</ref>,<sp/>ta-&gt;<ref refid="structie__task__arg__t_1aa687c7daa39cacca34ab74ff58f433d5" kindref="member">nth_map</ref>,<sp/>ta-&gt;<ref refid="structie__task__arg__t_1a9d90ceaa82f746983034dd7bc034bc26" kindref="member">use_affinity</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ta-&gt;<ref refid="structie__task__arg__t_1afee2b8f07881d75ea8829a1f54757c5e" kindref="member">start</ref><sp/>&lt;<sp/>ta-&gt;<ref refid="structie__task__arg__t_1a68e089a47b157f9398b8059269d6b95d" kindref="member">end</ref><sp/>&amp;&amp;<sp/>ta-&gt;<ref refid="structie__task__arg__t_1a1d5b2ad9724bb08fba602b3cb4ad28e8" kindref="member">body</ref>)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1a1d5b2ad9724bb08fba602b3cb4ad28e8" kindref="member">body</ref>(ta-&gt;<ref refid="structie__task__arg__t_1ad0a63b137b85c1b50a797cd54204fd69" kindref="member">ctx</ref>,<sp/>ta-&gt;<ref refid="structie__task__arg__t_1afee2b8f07881d75ea8829a1f54757c5e" kindref="member">start</ref>,<sp/>ta-&gt;<ref refid="structie__task__arg__t_1a68e089a47b157f9398b8059269d6b95d" kindref="member">end</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>free(ta);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="ie__threadpool_8h_1ac3dd114f8b47a5fe0d22f8107a51e90f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="thread__pool_8c_1ab0bb2b90df0908183de34784810a9386" kindref="member">ie_tp_parallel_for</ref>(<ref refid="ie__threadpool_8h_1ada8c808f3fdd5327b3082d8725561ce8" kindref="member">ie_threadpool_t</ref><sp/>*h,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>grainsize,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ie__threadpool_8h_1af0040a9e6d528cabc1c7797542b85693" kindref="member">ie_tp_for_body_fn</ref><sp/>body_fn,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0<sp/>||<sp/>!body_fn)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preferred<sp/>worker<sp/>count<sp/>and<sp/>affinity<sp/>policy<sp/>for<sp/>mapping.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nth_pref<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aff<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_aff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref><sp/>*tp<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structie__threadpool" kindref="compound">ie_threadpool</ref>*)h;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>nth_pref<sp/>=<sp/>tp-&gt;<ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref><sp/>?<sp/>tp-&gt;<ref refid="structie__threadpool_1a049cb6c4affb07f0eb1199091bdfa6ce" kindref="member">nth</ref><sp/>:<sp/>1u;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>aff<sp/>=<sp/>tp-&gt;<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref><sp/>?<sp/>tp-&gt;<ref refid="structie__threadpool_1ab30ff46e0f8992c0c9fceea8c336a4a0" kindref="member">affinity</ref><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>use_aff<sp/>=<sp/>tp-&gt;<ref refid="structie__threadpool_1ac1aab334f9b4baf6aac73f151438f7bd" kindref="member">use_affinity</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nth_pref<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>body_fn(ctx,<sp/>0u,<sp/>n);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>chunk<sp/>size<sp/>and<sp/>total<sp/>number<sp/>of<sp/>chunks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>min_chunk<sp/>=<sp/>(grainsize<sp/>&gt;<sp/>0<sp/>?<sp/>grainsize<sp/>:<sp/>(n<sp/>+<sp/>nth_pref<sp/>-<sp/>1)<sp/>/<sp/>nth_pref);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_chunk<sp/>==<sp/>0)<sp/>min_chunk<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nchunks<sp/>=<sp/>(n<sp/>+<sp/>min_chunk<sp/>-<sp/>1)<sp/>/<sp/>min_chunk;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Launch<sp/>one<sp/>task<sp/>thread<sp/>per<sp/>chunk<sp/>to<sp/>guarantee<sp/>full<sp/>coverage.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>pthread_t<sp/>*ths<sp/>=<sp/>(pthread_t*)calloc(nchunks,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pthread_t));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ths)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fallback:<sp/>single-threaded<sp/>if<sp/>allocation<sp/>fails.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>body_fn(ctx,<sp/>0u,<sp/>n);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>nchunks;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>c<sp/>*<sp/>min_chunk;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>end<sp/><sp/><sp/>=<sp/>start<sp/>+<sp/>min_chunk;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&gt;=<sp/>n)<sp/>{<sp/>ths[c]<sp/>=<sp/>(pthread_t)0;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;<sp/>n)<sp/>end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structie__task__arg__t" kindref="compound">ie_task_arg_t</ref><sp/>*ta<sp/>=<sp/>(<ref refid="structie__task__arg__t" kindref="compound">ie_task_arg_t</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ta));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ta)<sp/>{<sp/>ths[c]<sp/>=<sp/>(pthread_t)0;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Map<sp/>chunk<sp/>index<sp/>to<sp/>a<sp/>virtual<sp/>worker<sp/>index<sp/>for<sp/>affinity<sp/>purposes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1a3392b3ce65fc59698bec0d92ec94ba31" kindref="member">affinity</ref><sp/><sp/>=<sp/>aff;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1a9d90ceaa82f746983034dd7bc034bc26" kindref="member">use_affinity</ref><sp/>=<sp/>use_aff;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1aa687c7daa39cacca34ab74ff58f433d5" kindref="member">nth_map</ref><sp/><sp/><sp/>=<sp/>nth_pref;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1a67e8d3401edad2240d6c2f4d398fc6d0" kindref="member">tidx_map</ref><sp/><sp/>=<sp/>(nth_pref<sp/>?<sp/>(c<sp/>%<sp/>nth_pref)<sp/>:<sp/>0u);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1afee2b8f07881d75ea8829a1f54757c5e" kindref="member">start</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1a68e089a47b157f9398b8059269d6b95d" kindref="member">end</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1a1d5b2ad9724bb08fba602b3cb4ad28e8" kindref="member">body</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>body_fn;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>ta-&gt;<ref refid="structie__task__arg__t_1ad0a63b137b85c1b50a797cd54204fd69" kindref="member">ctx</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ctx;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;ths[c],<sp/>NULL,<sp/><ref refid="thread__pool_8c_1a2359598b57e5b606af0406bb0e2fba98" kindref="member">ie_task_main</ref>,<sp/>ta)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(ta);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ths[c]<sp/>=<sp/>(pthread_t)0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>nchunks;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ths[c])<sp/>pthread_join(ths[c],<sp/>NULL);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>free(ths);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="engine/src/opt/thread_pool.c"/>
  </compounddef>
</doxygen>
