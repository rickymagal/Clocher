<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__tokenizer_8c" kind="file" language="C++">
    <compoundname>test_tokenizer.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="ie__io_8h" local="yes">ie_io.h</includes>
    <incdepgraph>
      <node id="7">
        <label>ie_io.h</label>
        <link refid="ie__io_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/c/test_tokenizer.c</label>
        <link refid="test__tokenizer_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="8">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__tokenizer_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Program entrypoint for tokenizer tests. </para>
        </briefdescription>
        <detaileddescription>
<para>Steps: 1) Load vocab (file present or stub). 2) Encode with size-only query to get the required buffer length. 3) Encode into a real buffer and verify counts. 4) Decode and check formatting invariants (starts with &apos;T&apos;, space count).</para>
<para><simplesect kind="return"><para>0 on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_tokenizer.c" line="24" column="5" bodyfile="tests/c/test_tokenizer.c" bodystart="24" bodyend="59"/>
        <references refid="group__ie__io__tokenizer_1ga68bc61261a64b4fe8bd566fc7d399a2e" compoundref="tokenizer_8c" startline="231" endline="272">ie_tok_decode</references>
        <references refid="group__ie__io__tokenizer_1ga2b9cb342eb062867f93fb786548003f7" compoundref="tokenizer_8c" startline="162" endline="213">ie_tok_encode</references>
        <references refid="group__ie__io__tokenizer_1gadbe33a7f4e53bcb709d56dc753c9148b" compoundref="tokenizer_8c" startline="97" endline="132">ie_vocab_load</references>
        <references refid="structie__vocab__s_1a794049c93aac2c2c4b8e12c673db5296" compoundref="ie__io_8h" startline="190">ie_vocab_s::vocab_size</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Unit tests for the tokenizer (size query, encode, decode invariants). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>malloc,<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>uint32_t<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__io_8h" kindref="compound">ie_io.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="test__tokenizer_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__tokenizer_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="group__ie__io__tokenizer_1ga8bdd12fff1489e034fcb2e8f7f29039a" kindref="member">ie_vocab_t</ref><sp/>v;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>assert(<ref refid="group__ie__io__tokenizer_1gadbe33a7f4e53bcb709d56dc753c9148b" kindref="member">ie_vocab_load</ref>(</highlight><highlight class="stringliteral">&quot;models/gpt-oss-20b/vocab.json&quot;</highlight><highlight class="normal">,<sp/>&amp;v)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>assert(v.<ref refid="structie__vocab__s_1a794049c93aac2c2c4b8e12c673db5296" kindref="member">vocab_size</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*txt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world<sp/><sp/>from<sp/><sp/><sp/>engine&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size-only<sp/>query<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>uint32_t<sp/>needed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>assert(<ref refid="group__ie__io__tokenizer_1ga2b9cb342eb062867f93fb786548003f7" kindref="member">ie_tok_encode</ref>(&amp;v,<sp/>txt,<sp/>NULL,<sp/>&amp;needed)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>assert(needed<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Full<sp/>encode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>uint32_t<sp/>*ids<sp/>=<sp/>(uint32_t*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)<sp/>*<sp/>needed);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>assert(ids<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>uint32_t<sp/>got<sp/>=<sp/>needed;<sp/></highlight><highlight class="comment">/*<sp/>capacity<sp/>in,<sp/>count<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>assert(<ref refid="group__ie__io__tokenizer_1ga2b9cb342eb062867f93fb786548003f7" kindref="member">ie_tok_encode</ref>(&amp;v,<sp/>txt,<sp/>ids,<sp/>&amp;got)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>assert(got<sp/>==<sp/>needed);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Decode<sp/>to<sp/>text<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[256];</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>assert(<ref refid="group__ie__io__tokenizer_1ga68bc61261a64b4fe8bd566fc7d399a2e" kindref="member">ie_tok_decode</ref>(&amp;v,<sp/>ids,<sp/>got,<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity:<sp/>decoding<sp/>starts<sp/>with<sp/>a<sp/>&quot;T&quot;<sp/>token<sp/>placeholder<sp/>and<sp/>contains<sp/>spaces<sp/>between<sp/>tokens<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>assert(strncmp(buf,<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>should<sp/>be<sp/>exactly<sp/>(needed<sp/>-<sp/>1)<sp/>spaces<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>spaces<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>buf;<sp/>*p;<sp/>++p)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++spaces;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>assert(spaces<sp/>==<sp/>(needed<sp/>&gt;<sp/>0<sp/>?<sp/>needed<sp/>-<sp/>1<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>free(ids);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ok<sp/>test_tokenizer\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/c/test_tokenizer.c"/>
  </compounddef>
</doxygen>
