<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="floatx_8c" kind="file" language="C++">
    <compoundname>floatx.c</compoundname>
    <includes refid="ie__floatx_8h" local="yes">ie_floatx.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ie_floatx.h</label>
        <link refid="ie__floatx_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>engine/src/math/floatx.c</label>
        <link refid="floatx_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="floatx_8c_1a0c66f1d557d06e7bce4c3c702e884481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_fp32_to_bf16</definition>
        <argsstring>(const float *in, uint16_t *out, size_t n)</argsstring>
        <name>ie_fp32_to_bf16</name>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert FP32 → BF16 with round-to-nearest-even. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert an array of float (FP32) to bfloat16 (BF16).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>FP32 input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>BF16 output array (uint16_t per element). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/math/floatx.c" line="20" column="6" bodyfile="engine/src/math/floatx.c" bodystart="20" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="floatx_8c_1a51e5457de6cbdf1472fa106bc3be98de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_bf16_to_fp32</definition>
        <argsstring>(const uint16_t *in, float *out, size_t n)</argsstring>
        <name>ie_bf16_to_fp32</name>
        <param>
          <type>const uint16_t *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert BF16 → FP32. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert an array of bfloat16 (BF16) to float (FP32).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>BF16 input array (uint16_t per element). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>FP32 output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/math/floatx.c" line="42" column="6" bodyfile="engine/src/math/floatx.c" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="floatx_8c_1a1aa580b0b947f7d3a6628e844d9aa852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_fp32_to_fp16</definition>
        <argsstring>(const float *in, uint16_t *out, size_t n)</argsstring>
        <name>ie_fp32_to_fp16</name>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert FP32 → FP16 (IEEE 754 half) round-to-nearest-even. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert an array of float (FP32) to IEEE half (FP16).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>FP32 input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>FP16 output array (uint16_t per element). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/math/floatx.c" line="62" column="6" bodyfile="engine/src/math/floatx.c" bodystart="62" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="floatx_8c_1ad5abc69b1882aaf3a03faf76ddf4cb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_fp16_to_fp32</definition>
        <argsstring>(const uint16_t *in, float *out, size_t n)</argsstring>
        <name>ie_fp16_to_fp32</name>
        <param>
          <type>const uint16_t *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert FP16 (IEEE 754 half) → FP32. </para>
        </briefdescription>
        <detaileddescription>
<para>Convert an array of IEEE half (FP16) to float (FP32).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>FP16 input array (uint16_t per element). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>FP32 output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/src/math/floatx.c" line="120" column="6" bodyfile="engine/src/math/floatx.c" bodystart="120" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>FP32↔BF16/FP16 conversion helpers (vector forms). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__floatx_8h" kindref="compound">ie_floatx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------<sp/>FP32<sp/>&lt;-&gt;<sp/>BF16<sp/>------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="ie__floatx_8h_1a0c66f1d557d06e7bce4c3c702e884481" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="floatx_8c_1a0c66f1d557d06e7bce4c3c702e884481" kindref="member">ie_fp32_to_bf16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*in,<sp/>uint16_t<sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in<sp/>||<sp/>!out<sp/>||<sp/>n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;<sp/>uint32_t<sp/>u;<sp/>}<sp/>v<sp/>=<sp/>{<sp/>.f<sp/>=<sp/>in[i]<sp/>};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>x<sp/>=<sp/>v.u;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Round-to-nearest-even<sp/>on<sp/>the<sp/>lower<sp/>16<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>lsb<sp/>=<sp/>(x<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>1u;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>rounding_bias<sp/>=<sp/>0x7FFFu<sp/>+<sp/>lsb;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>rounding_bias;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>(uint16_t)(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="ie__floatx_8h_1a51e5457de6cbdf1472fa106bc3be98de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="floatx_8c_1a51e5457de6cbdf1472fa106bc3be98de" kindref="member">ie_bf16_to_fp32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in<sp/>||<sp/>!out<sp/>||<sp/>n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{<sp/>uint32_t<sp/>u;<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;<sp/>}<sp/>v;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>v.u<sp/>=<sp/>((uint32_t)in[i])<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>v.f;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------<sp/>FP32<sp/>&lt;-&gt;<sp/>FP16<sp/>------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helpers<sp/>adapted<sp/>from<sp/>common<sp/>IEEE-754<sp/>half<sp/>conversions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="ie__floatx_8h_1a1aa580b0b947f7d3a6628e844d9aa852" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="floatx_8c_1a1aa580b0b947f7d3a6628e844d9aa852" kindref="member">ie_fp32_to_fp16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*in,<sp/>uint16_t<sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in<sp/>||<sp/>!out<sp/>||<sp/>n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;<sp/>uint32_t<sp/>u;<sp/>}<sp/>v<sp/>=<sp/>{<sp/>.f<sp/>=<sp/>in[i]<sp/>};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>x<sp/>=<sp/>v.u;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>sign<sp/>=<sp/>(x<sp/>&gt;&gt;<sp/>31)<sp/>&amp;<sp/>0x1u;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/><sp/>exp<sp/><sp/>=<sp/>(int32_t)((x<sp/>&gt;&gt;<sp/>23)<sp/>&amp;<sp/>0xFFu)<sp/>-<sp/>127;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unbiased<sp/>exp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frac<sp/>=<sp/>x<sp/>&amp;<sp/>0x7FFFFFu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>23<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>h;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>==<sp/>128)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Inf<sp/>/<sp/>NaN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(uint16_t)((sign<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>0x7C00u<sp/>|<sp/>(frac<sp/>?<sp/>0x200u<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;<sp/>15)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Overflow<sp/>-&gt;<sp/>Inf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(uint16_t)((sign<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>0x7C00u);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;=<sp/>-14)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Normalized<sp/>half<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Put<sp/>implicit<sp/>leading<sp/>1<sp/>back<sp/>and<sp/>round<sp/>to<sp/>10<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>mant<sp/>=<sp/>(frac<sp/>|<sp/>0x800000u);<sp/></highlight><highlight class="comment">/*<sp/>24<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>13<sp/>-<sp/>exp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>align<sp/>to<sp/>10-bit<sp/>mantissa<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>rounding<sp/>=<sp/>(shift<sp/>&gt;<sp/>0)<sp/>?<sp/>((1u<sp/>&lt;&lt;<sp/>(shift<sp/>-<sp/>1))<sp/>-<sp/>1u)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>half_mant<sp/>=<sp/>(shift<sp/>&gt;<sp/>0)<sp/>?<sp/>((mant<sp/>+<sp/>rounding<sp/>+<sp/>((mant<sp/>&gt;&gt;<sp/>shift)<sp/>&amp;<sp/>1u))<sp/>&gt;&gt;<sp/>shift)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(mant<sp/>&lt;&lt;<sp/>(-shift));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(half_mant<sp/>&amp;<sp/>0x400u)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>mantissa<sp/>overflow<sp/>after<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>half_mant<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;<sp/>15)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>overflow<sp/>to<sp/>Inf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(uint16_t)((sign<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>0x7C00u);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>he<sp/>=<sp/>(uint16_t)((exp<sp/>+<sp/>15)<sp/>&amp;<sp/>0x1Fu);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(uint16_t)((sign<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>(he<sp/>&lt;&lt;<sp/>10)<sp/>|<sp/>(half_mant<sp/>&amp;<sp/>0x3FFu));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;=<sp/>-24)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Subnormal<sp/>half<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>mant<sp/>=<sp/>(frac<sp/>|<sp/>0x800000u);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rshift<sp/>=<sp/>(-14<sp/>-<sp/>exp)<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>+1<sp/>to<sp/>position<sp/>for<sp/>subnormal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sub<sp/>=<sp/>mant<sp/>&gt;&gt;<sp/>(rshift<sp/>+<sp/>13);<sp/></highlight><highlight class="comment">/*<sp/>to<sp/>10<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>round-to-nearest-even<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>rem<sp/>=<sp/>mant<sp/>&amp;<sp/>((1u<sp/>&lt;&lt;<sp/>(rshift<sp/>+<sp/>13))<sp/>-<sp/>1u);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>halfway<sp/>=<sp/>1u<sp/>&lt;&lt;<sp/>(rshift<sp/>+<sp/>12);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&gt;<sp/>halfway<sp/>||<sp/>(rem<sp/>==<sp/>halfway<sp/>&amp;&amp;<sp/>(sub<sp/>&amp;<sp/>1u)))<sp/>sub++;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(uint16_t)((sign<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>(sub<sp/>&amp;<sp/>0x3FFu));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Underflow<sp/>-&gt;<sp/>signed<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(uint16_t)(sign<sp/>&lt;&lt;<sp/>15);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="ie__floatx_8h_1ad5abc69b1882aaf3a03faf76ddf4cb28" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="floatx_8c_1ad5abc69b1882aaf3a03faf76ddf4cb28" kindref="member">ie_fp16_to_fp32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*in,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in<sp/>||<sp/>!out<sp/>||<sp/>n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>h<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>sign<sp/>=<sp/>(h<sp/>&gt;&gt;<sp/>15)<sp/>&amp;<sp/>0x1u;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>exp<sp/><sp/>=<sp/>(h<sp/>&gt;&gt;<sp/>10)<sp/>&amp;<sp/>0x1Fu;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frac<sp/>=<sp/>h<sp/>&amp;<sp/>0x3FFu;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>out_sign<sp/>=<sp/>sign<sp/>&lt;&lt;<sp/>31;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>out_exp,<sp/>out_frac;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frac<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_exp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_frac<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>subnormal<sp/>-&gt;<sp/>normalize<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>-14;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>f<sp/>=<sp/>frac;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((f<sp/>&amp;<sp/>0x400u)<sp/>==<sp/>0)<sp/>{<sp/>f<sp/>&lt;&lt;=<sp/>1;<sp/>e--;<sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>&amp;=<sp/>0x3FFu;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_exp<sp/><sp/>=<sp/>(uint32_t)(e<sp/>+<sp/>127)<sp/>&lt;&lt;<sp/>23;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_frac<sp/>=<sp/>f<sp/>&lt;&lt;<sp/>13;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>==<sp/>31)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_exp<sp/><sp/>=<sp/>0xFFu<sp/>&lt;&lt;<sp/>23;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_frac<sp/>=<sp/>(frac<sp/>?<sp/>(frac<sp/>&lt;&lt;<sp/>13)<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_exp<sp/><sp/>=<sp/>(uint32_t)(exp<sp/>-<sp/>15<sp/>+<sp/>127)<sp/>&lt;&lt;<sp/>23;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_frac<sp/>=<sp/>frac<sp/>&lt;&lt;<sp/>13;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{<sp/>uint32_t<sp/>u;<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;<sp/>}<sp/>v<sp/>=<sp/>{<sp/>.u<sp/>=<sp/>out_sign<sp/>|<sp/>out_exp<sp/>|<sp/>out_frac<sp/>};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>v.f;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="engine/src/math/floatx.c"/>
  </compounddef>
</doxygen>
