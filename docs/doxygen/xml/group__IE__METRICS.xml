<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group__IE__METRICS" kind="group">
    <compoundname>IE_METRICS</compoundname>
    <title>Utilities: KV counters and RSS sampler</title>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__IE__METRICS_1ga874413f3f40c7927c465112b7f162656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_metrics_reset</definition>
        <argsstring>(void)</argsstring>
        <name>ie_metrics_reset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset process-wide KV counters to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>Thread-safe (uses relaxed atomics). Intended for tests or to delimit rounds.</para>
<para>Reset process-wide KV counters to zero.</para>
<para><simplesect kind="post"><para>Subsequent snapshots will report zeros until producers add counts.</para>
</simplesect>
@thread_safety Safe; uses C11 atomics. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/util_metrics.h" line="36" column="6" bodyfile="engine/src/util_metrics.c" bodystart="143" bodyend="146" declfile="engine/include/util_metrics.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__IE__METRICS_1ga7102e1b1461b7ac674d42c58660fda0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_metrics_add_kv_hit</definition>
        <argsstring>(uint64_t n)</argsstring>
        <name>ie_metrics_add_kv_hit</name>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Add <computeroutput>n</computeroutput> KV hits to the process-wide counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of hits to add (no-op if 0).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Add <computeroutput>n</computeroutput> KV hits to the process-wide counter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of hits to add (may be zero). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/util_metrics.h" line="42" column="6" bodyfile="engine/src/util_metrics.c" bodystart="148" bodyend="151" declfile="engine/include/util_metrics.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__IE__METRICS_1ga8eecda9f8202c3f887066f287d97c954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_metrics_add_kv_miss</definition>
        <argsstring>(uint64_t n)</argsstring>
        <name>ie_metrics_add_kv_miss</name>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Add <computeroutput>n</computeroutput> KV misses to the process-wide counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of misses to add (no-op if 0).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Add <computeroutput>n</computeroutput> KV misses to the process-wide counter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of misses to add (may be zero). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/util_metrics.h" line="48" column="6" bodyfile="engine/src/util_metrics.c" bodystart="153" bodyend="156" declfile="engine/include/util_metrics.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__IE__METRICS_1gaf9f02e4faa24298be27d9299df602fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_metrics_add_kv</definition>
        <argsstring>(uint64_t hits, uint64_t misses)</argsstring>
        <name>ie_metrics_add_kv</name>
        <param>
          <type>uint64_t</type>
          <declname>hits</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>misses</declname>
        </param>
        <briefdescription>
<para>Add both hits and misses in one call (each may be zero). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hits</parametername>
</parameternamelist>
<parameterdescription>
<para>Hits to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>misses</parametername>
</parameternamelist>
<parameterdescription>
<para>Misses to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Add both hits and misses in one call (each may be zero).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hits</parametername>
</parameternamelist>
<parameterdescription>
<para>Hits to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>misses</parametername>
</parameternamelist>
<parameterdescription>
<para>Misses to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/util_metrics.h" line="55" column="6" bodyfile="engine/src/util_metrics.c" bodystart="158" bodyend="161" declfile="engine/include/util_metrics.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__IE__METRICS_1ga3a6a9208ad3e80cbc57fb1923e5e263f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ie_metrics_snapshot</definition>
        <argsstring>(ie_metrics_t *out, int reset_after)</argsstring>
        <name>ie_metrics_snapshot</name>
        <param>
          <type><ref refid="structie__metrics__t" kindref="compound">ie_metrics_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reset_after</declname>
        </param>
        <briefdescription>
<para>Snapshot process-wide KV counters into <computeroutput>out</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination snapshot (must be non-NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reset_after</parametername>
</parameternamelist>
<parameterdescription>
<para>If nonzero, counters are reset after reading.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Only KV fields inside <computeroutput>out</computeroutput> are written by this function. Other fields of <computeroutput>out</computeroutput> are left untouched (so callers can compose metrics).</para>
<para>Snapshot process-wide KV counters into <computeroutput>out</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination snapshot structure (must not be NULL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reset_after</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, zeroes accumulators after copying. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/util_metrics.h" line="66" column="6" bodyfile="engine/src/util_metrics.c" bodystart="163" bodyend="175" declfile="engine/include/util_metrics.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__IE__METRICS_1ga0b083c9fbf90d02c9ef387ab34220a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ie_metrics_sample_rss_peak</definition>
        <argsstring>(void)</argsstring>
        <name>ie_metrics_sample_rss_peak</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Best-effort sampling of process peak RSS, in MiB. </para>
        </briefdescription>
        <detaileddescription>
<para>Platform behavior:<itemizedlist>
<listitem><para><bold>Linux:</bold> tries <computeroutput>/proc/self/status</computeroutput> <computeroutput>VmHWM:</computeroutput> (kB), falls back to <computeroutput>VmRSS:</computeroutput> (kB), then <computeroutput>/proc/self/smaps_rollup</computeroutput> <computeroutput>Rss:</computeroutput> (kB), and finally <computeroutput>getrusage()</computeroutput> (kB). kB are rounded up to MiB.</para>
</listitem><listitem><para><bold>macOS:</bold> uses <computeroutput>mach_task_basic_info</computeroutput> (bytes) and falls back to <computeroutput>getrusage()</computeroutput> (bytes). Bytes are rounded up to MiB.</para>
</listitem><listitem><para><bold>Other OS:</bold> falls back to <computeroutput>getrusage()</computeroutput> and conservatively treats the value as kB.</para>
</listitem></itemizedlist>
</para>
<para>Debugging:<itemizedlist>
<listitem><para>Set <computeroutput>IE_DEBUG_RSS=1</computeroutput> to print sampler decisions to stderr.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>Peak RSS in MiB (0 if unavailable or reported &lt; 1 MiB).</para>
</simplesect>
Best-effort sampling of process peak RSS, in MiB.</para>
<para>On Linux, prefers reading <computeroutput>/proc/self/status</computeroutput> (VmHWM). If unavailable, falls back to <computeroutput>getrusage(RUSAGE_SELF).ru_maxrss</computeroutput>. On non-Linux, only the <computeroutput>getrusage</computeroutput> fallback is used where available. Returns 0 if unsupported.</para>
<para><simplesect kind="return"><para>Peak RSS in megabytes (MB), rounded down; 0 if unknown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="engine/include/util_metrics.h" line="85" column="10" bodyfile="engine/src/util_metrics.c" bodystart="181" bodyend="287" declfile="engine/include/util_metrics.h" declline="85" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
