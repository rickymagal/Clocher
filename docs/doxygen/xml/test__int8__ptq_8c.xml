<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__int8__ptq_8c" kind="file" language="C++">
    <compoundname>test_int8_ptq.c</compoundname>
    <includes refid="ie__quant_8h" local="yes">ie_quant.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="2">
        <label>ie_quant.h</label>
        <link refid="ie__quant_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/c/test_int8_ptq.c</label>
        <link refid="test__int8__ptq_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__int8__ptq_8c_1a38b4b69f6c9e30a70285f7bc1e98ea8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float mse</definition>
        <argsstring>(const float *a, const float *b, size_t n)</argsstring>
        <name>mse</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Compute mean squared error between two float arrays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first float array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second float array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in both arrays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mean squared error as a float. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_int8_ptq.c" line="26" column="14" bodyfile="tests/c/test_int8_ptq.c" bodystart="26" bodyend="33"/>
        <referencedby refid="group__ie__int4__quant_1ga5eab5a797587f75e75af981b851f3d4d" compoundref="int4__ptq_8c" startline="240" endline="271">ie_int4_error_metrics</referencedby>
        <referencedby refid="test__int8__ptq_8c_1a8ae74b307e2995ddbc1b9aba3b77c0a3" compoundref="test__int8__ptq_8c" startline="101" endline="135">test_per_row_independent_scales</referencedby>
        <referencedby refid="test__int8__ptq_8c_1a3792beb85f04b90aa7eee559045c2748" compoundref="test__int8__ptq_8c" startline="57" endline="92">test_per_tensor_roundtrip</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__int8__ptq_8c_1a5969f0517526230ebcb76679e448b03a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int all_in_sym_int8_range</definition>
        <argsstring>(const int8_t *q8, size_t n)</argsstring>
        <name>all_in_sym_int8_range</name>
        <param>
          <type>const int8_t *</type>
          <declname>q8</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check that all elements of an INT8 array lie within [-127, 127]. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q8</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to INT8 data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if valid, 0 otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_int8_ptq.c" line="42" column="12" bodyfile="tests/c/test_int8_ptq.c" bodystart="42" bodyend="47"/>
        <referencedby refid="test__int8__ptq_8c_1a8ae74b307e2995ddbc1b9aba3b77c0a3" compoundref="test__int8__ptq_8c" startline="101" endline="135">test_per_row_independent_scales</referencedby>
        <referencedby refid="test__int8__ptq_8c_1a3792beb85f04b90aa7eee559045c2748" compoundref="test__int8__ptq_8c" startline="57" endline="92">test_per_tensor_roundtrip</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__int8__ptq_8c_1a3792beb85f04b90aa7eee559045c2748" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_per_tensor_roundtrip</definition>
        <argsstring>(void)</argsstring>
        <name>test_per_tensor_roundtrip</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Smoke test for per-tensor scale, quantize and dequantize. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates a simple ramp, quantizes with per-tensor scaling and checks basic properties (range, small MSE, non-zero scale).</para>
<para><simplesect kind="return"><para>EXIT_SUCCESS on pass; EXIT_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_int8_ptq.c" line="57" column="12" bodyfile="tests/c/test_int8_ptq.c" bodystart="57" bodyend="92"/>
        <references refid="test__int8__ptq_8c_1a5969f0517526230ebcb76679e448b03a" compoundref="test__int8__ptq_8c" startline="42" endline="47">all_in_sym_int8_range</references>
        <references refid="ie__quant_8h_1a3cc68794fcfd2082fae543dbac7d652d" compoundref="int8__ptq_8c" startline="57" endline="89">ie_ptq_compute_scales_minmax</references>
        <references refid="ie__quant_8h_1a475490c4ad104bbbd8a1f0f4cc714069" compoundref="int8__ptq_8c" startline="154" endline="180">ie_ptq_dequant_int8</references>
        <references refid="ie__quant_8h_1af45e61af59caa6f75b228f0fa2ebcead" compoundref="int8__ptq_8c" startline="109" endline="136">ie_ptq_quantize_int8</references>
        <references refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494abaa607bffb3e8229edaca8535a10eda192" compoundref="ie__quant_8h" startline="26">IE_PTQ_SCALE_PER_TENSOR</references>
        <references refid="test__int8__ptq_8c_1a38b4b69f6c9e30a70285f7bc1e98ea8e" compoundref="test__int8__ptq_8c" startline="26" endline="33">mse</references>
        <referencedby refid="test__int8__ptq_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__int8__ptq_8c" startline="165" endline="171">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__int8__ptq_8c_1a8ae74b307e2995ddbc1b9aba3b77c0a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_per_row_independent_scales</definition>
        <argsstring>(void)</argsstring>
        <name>test_per_row_independent_scales</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test per-row scaling on a matrix with different row magnitudes. </para>
        </briefdescription>
        <detaileddescription>
<para>Builds two rows with different dynamic range to ensure independent scales.</para>
<para><simplesect kind="return"><para>EXIT_SUCCESS on pass; EXIT_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_int8_ptq.c" line="101" column="12" bodyfile="tests/c/test_int8_ptq.c" bodystart="101" bodyend="135"/>
        <references refid="test__int8__ptq_8c_1a5969f0517526230ebcb76679e448b03a" compoundref="test__int8__ptq_8c" startline="42" endline="47">all_in_sym_int8_range</references>
        <references refid="ie__quant_8h_1a3cc68794fcfd2082fae543dbac7d652d" compoundref="int8__ptq_8c" startline="57" endline="89">ie_ptq_compute_scales_minmax</references>
        <references refid="ie__quant_8h_1a475490c4ad104bbbd8a1f0f4cc714069" compoundref="int8__ptq_8c" startline="154" endline="180">ie_ptq_dequant_int8</references>
        <references refid="ie__quant_8h_1af45e61af59caa6f75b228f0fa2ebcead" compoundref="int8__ptq_8c" startline="109" endline="136">ie_ptq_quantize_int8</references>
        <references refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494aba359d6e53066af385fc19619f4e03b62e" compoundref="ie__quant_8h" startline="27">IE_PTQ_SCALE_PER_ROW</references>
        <references refid="test__int8__ptq_8c_1a38b4b69f6c9e30a70285f7bc1e98ea8e" compoundref="test__int8__ptq_8c" startline="26" endline="33">mse</references>
        <referencedby refid="test__int8__ptq_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__int8__ptq_8c" startline="165" endline="171">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__int8__ptq_8c_1ab9ef656d54b1e5e856eda1c73fb90787" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test_saturation_symmetric</definition>
        <argsstring>(void)</argsstring>
        <name>test_saturation_symmetric</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Validate symmetric clamping at the INT8 limits. </para>
        </briefdescription>
        <detaileddescription>
<para>Builds values above/below the representable range and checks that quantization clamps to [-127, +127].</para>
<para><simplesect kind="return"><para>EXIT_SUCCESS on pass; EXIT_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_int8_ptq.c" line="145" column="12" bodyfile="tests/c/test_int8_ptq.c" bodystart="145" bodyend="158"/>
        <references refid="ie__quant_8h_1af45e61af59caa6f75b228f0fa2ebcead" compoundref="int8__ptq_8c" startline="109" endline="136">ie_ptq_quantize_int8</references>
        <references refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494abaa607bffb3e8229edaca8535a10eda192" compoundref="ie__quant_8h" startline="26">IE_PTQ_SCALE_PER_TENSOR</references>
        <referencedby refid="test__int8__ptq_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__int8__ptq_8c" startline="165" endline="171">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__int8__ptq_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Program entry: runs all PTQ unit tests. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>EXIT_SUCCESS if all pass; EXIT_FAILURE otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_int8_ptq.c" line="165" column="5" bodyfile="tests/c/test_int8_ptq.c" bodystart="165" bodyend="171"/>
        <references refid="test__int8__ptq_8c_1a8ae74b307e2995ddbc1b9aba3b77c0a3" compoundref="test__int8__ptq_8c" startline="101" endline="135">test_per_row_independent_scales</references>
        <references refid="test__int8__ptq_8c_1a3792beb85f04b90aa7eee559045c2748" compoundref="test__int8__ptq_8c" startline="57" endline="92">test_per_tensor_roundtrip</references>
        <references refid="test__int8__ptq_8c_1ab9ef656d54b1e5e856eda1c73fb90787" compoundref="test__int8__ptq_8c" startline="145" endline="158">test_saturation_symmetric</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>C unit tests for INT8 PTQ min-max scaling and (de)quantization. </para>
    </briefdescription>
    <detaileddescription>
<para>These tests validate:<itemizedlist>
<listitem><para>Per-tensor and per-row scale computation</para>
</listitem><listitem><para>Quantize -&gt; Dequantize round-trip numerical behavior</para>
</listitem><listitem><para>Symmetric clamp behavior in [-127, +127] </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__quant_8h" kindref="compound">ie_quant.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fabsf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="test__int8__ptq_8c_1a38b4b69f6c9e30a70285f7bc1e98ea8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="test__int8__ptq_8c_1a38b4b69f6c9e30a70285f7bc1e98ea8e" kindref="member">mse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>a[i]<sp/>-<sp/>b[i];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>d<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0)<sp/>?<sp/>(s<sp/>/<sp/>(float)n)<sp/>:<sp/>0.0f;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="test__int8__ptq_8c_1a5969f0517526230ebcb76679e448b03a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__int8__ptq_8c_1a5969f0517526230ebcb76679e448b03a" kindref="member">all_in_sym_int8_range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>*q8,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q8[i]<sp/>&lt;<sp/>-127<sp/>||<sp/>q8[i]<sp/>&gt;<sp/>127)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="test__int8__ptq_8c_1a3792beb85f04b90aa7eee559045c2748" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__int8__ptq_8c_1a3792beb85f04b90aa7eee559045c2748" kindref="member">test_per_tensor_roundtrip</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>4,<sp/>cols<sp/>=<sp/>8,<sp/>n<sp/>=<sp/>rows<sp/>*<sp/>cols;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*w<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*w_deq<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>int8_t<sp/>*q8<sp/>=<sp/>(int8_t*)malloc(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale[1]<sp/>=<sp/>{0.0f};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>(float)((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)i<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)n/2)<sp/>/<sp/>13.0f;<sp/></highlight><highlight class="comment">/*<sp/>spread<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="ie__quant_8h_1a3cc68794fcfd2082fae543dbac7d652d" kindref="member">ie_ptq_compute_scales_minmax</ref>(w,<sp/>rows,<sp/>cols,<sp/><ref refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494abaa607bffb3e8229edaca8535a10eda192" kindref="member">IE_PTQ_SCALE_PER_TENSOR</ref>,<sp/>scale);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(scale[0]<sp/>&gt;<sp/>0.0f))<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;per-tensor:<sp/>expected<sp/>scale<sp/>&gt;<sp/>0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="ie__quant_8h_1af45e61af59caa6f75b228f0fa2ebcead" kindref="member">ie_ptq_quantize_int8</ref>(w,<sp/>rows,<sp/>cols,<sp/><ref refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494abaa607bffb3e8229edaca8535a10eda192" kindref="member">IE_PTQ_SCALE_PER_TENSOR</ref>,<sp/>scale,<sp/>q8);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test__int8__ptq_8c_1a5969f0517526230ebcb76679e448b03a" kindref="member">all_in_sym_int8_range</ref>(q8,<sp/>n))<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;per-tensor:<sp/>q8<sp/>outside<sp/>symmetric<sp/>range\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="ie__quant_8h_1a475490c4ad104bbbd8a1f0f4cc714069" kindref="member">ie_ptq_dequant_int8</ref>(q8,<sp/>rows,<sp/>cols,<sp/><ref refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494abaa607bffb3e8229edaca8535a10eda192" kindref="member">IE_PTQ_SCALE_PER_TENSOR</ref>,<sp/>scale,<sp/>w_deq);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e<sp/>=<sp/><ref refid="test__int8__ptq_8c_1a38b4b69f6c9e30a70285f7bc1e98ea8e" kindref="member">mse</ref>(w,<sp/>w_deq,<sp/>n);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(e<sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>e<sp/>&lt;<sp/>5e-3f))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;per-tensor:<sp/>MSE<sp/>too<sp/>large:<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)e);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>free(w);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>free(w_deq);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>free(q8);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="test__int8__ptq_8c_1a8ae74b307e2995ddbc1b9aba3b77c0a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__int8__ptq_8c_1a8ae74b307e2995ddbc1b9aba3b77c0a3" kindref="member">test_per_row_independent_scales</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>2,<sp/>cols<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w[12]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>-0.1f,<sp/>-0.05f,<sp/>0.0f,<sp/>0.02f,<sp/>0.05f,<sp/>0.09f,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>small<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>-1.5f,<sp/>-0.7f,<sp/><sp/>0.0f,<sp/>0.9f,<sp/><sp/>1.2f,<sp/><sp/>1.4f<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>large<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scales[2]<sp/>=<sp/>{0.0f,<sp/>0.0f};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>int8_t<sp/>q8[12];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_deq[12];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="ie__quant_8h_1a3cc68794fcfd2082fae543dbac7d652d" kindref="member">ie_ptq_compute_scales_minmax</ref>(w,<sp/>rows,<sp/>cols,<sp/><ref refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494aba359d6e53066af385fc19619f4e03b62e" kindref="member">IE_PTQ_SCALE_PER_ROW</ref>,<sp/>scales);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(scales[0]<sp/>&gt;<sp/>0.0f<sp/>&amp;&amp;<sp/>scales[1]<sp/>&gt;<sp/>0.0f))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;per-row:<sp/>expected<sp/>both<sp/>scales<sp/>&gt;<sp/>0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(scales[1]<sp/>&gt;<sp/>scales[0]))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;per-row:<sp/>expected<sp/>larger<sp/>row<sp/>to<sp/>have<sp/>larger<sp/>scale\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="ie__quant_8h_1af45e61af59caa6f75b228f0fa2ebcead" kindref="member">ie_ptq_quantize_int8</ref>(w,<sp/>rows,<sp/>cols,<sp/><ref refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494aba359d6e53066af385fc19619f4e03b62e" kindref="member">IE_PTQ_SCALE_PER_ROW</ref>,<sp/>scales,<sp/>q8);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test__int8__ptq_8c_1a5969f0517526230ebcb76679e448b03a" kindref="member">all_in_sym_int8_range</ref>(q8,<sp/>rows<sp/>*<sp/>cols))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;per-row:<sp/>q8<sp/>outside<sp/>symmetric<sp/>range\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="ie__quant_8h_1a475490c4ad104bbbd8a1f0f4cc714069" kindref="member">ie_ptq_dequant_int8</ref>(q8,<sp/>rows,<sp/>cols,<sp/><ref refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494aba359d6e53066af385fc19619f4e03b62e" kindref="member">IE_PTQ_SCALE_PER_ROW</ref>,<sp/>scales,<sp/>w_deq);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e<sp/>=<sp/><ref refid="test__int8__ptq_8c_1a38b4b69f6c9e30a70285f7bc1e98ea8e" kindref="member">mse</ref>(w,<sp/>w_deq,<sp/>rows<sp/>*<sp/>cols);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(e<sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>e<sp/>&lt;<sp/>5e-3f))<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;per-row:<sp/>MSE<sp/>too<sp/>large:<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)e);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="test__int8__ptq_8c_1ab9ef656d54b1e5e856eda1c73fb90787" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__int8__ptq_8c_1ab9ef656d54b1e5e856eda1c73fb90787" kindref="member">test_saturation_symmetric</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>1,<sp/>cols<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w[6]<sp/>=<sp/>{<sp/>-10.0f,<sp/>-1.0f,<sp/>-0.01f,<sp/>0.01f,<sp/>1.0f,<sp/>10.0f<sp/>};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale[1]<sp/>=<sp/>{<sp/>0.01f<sp/>};<sp/></highlight><highlight class="comment">/*<sp/>force<sp/>saturation<sp/>for<sp/>extremes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>int8_t<sp/>q8[6];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="ie__quant_8h_1af45e61af59caa6f75b228f0fa2ebcead" kindref="member">ie_ptq_quantize_int8</ref>(w,<sp/>rows,<sp/>cols,<sp/><ref refid="ie__quant_8h_1ae73a58c1f5caa264cd3f860aeb2494abaa607bffb3e8229edaca8535a10eda192" kindref="member">IE_PTQ_SCALE_PER_TENSOR</ref>,<sp/>scale,<sp/>q8);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(q8[0]<sp/>==<sp/>-127<sp/>&amp;&amp;<sp/>q8[5]<sp/>==<sp/>127))<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;saturation:<sp/>expected<sp/>symmetric<sp/>clamp<sp/>to<sp/>[-127,127]<sp/>got<sp/>%d<sp/>and<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)q8[0],<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)q8[5]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="test__int8__ptq_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__int8__ptq_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__int8__ptq_8c_1a3792beb85f04b90aa7eee559045c2748" kindref="member">test_per_tensor_roundtrip</ref>()<sp/>!=<sp/>EXIT_SUCCESS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__int8__ptq_8c_1a8ae74b307e2995ddbc1b9aba3b77c0a3" kindref="member">test_per_row_independent_scales</ref>()<sp/>!=<sp/>EXIT_SUCCESS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__int8__ptq_8c_1ab9ef656d54b1e5e856eda1c73fb90787" kindref="member">test_saturation_symmetric</ref>()<sp/>!=<sp/>EXIT_SUCCESS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ok<sp/>test_int8_ptq\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/c/test_int8_ptq.c"/>
  </compounddef>
</doxygen>
