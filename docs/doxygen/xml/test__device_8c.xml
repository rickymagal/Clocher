<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test__device_8c" kind="file" language="C++">
    <compoundname>test_device.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="ie__device_8h" local="yes">ie_device.h</includes>
    <incdepgraph>
      <node id="5">
        <label>ie_device.h</label>
        <link refid="ie__device_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/c/test_device.c</label>
        <link refid="test__device_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__device_8c_1af2262a71f964197c86339e3797d0c9bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_kind_parse</definition>
        <argsstring>(void)</argsstring>
        <name>test_kind_parse</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify device kind parsing for common and unknown strings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_device.c" line="13" column="13" bodyfile="tests/c/test_device.c" bodystart="13" bodyend="19"/>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" compoundref="ie__device_8h" startline="19">IE_DEV_CPU</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" compoundref="ie__device_8h" startline="20">IE_DEV_CUDA</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fa3a29450e9feabd789030b167dc34fbd7" compoundref="ie__device_8h" startline="21">IE_DEV_ZE</references>
        <references refid="ie__device_8h_1aab258e9f33c12fc1276783d70b8c75a7" compoundref="ie__device__common_8c" startline="106" endline="116">ie_device_kind_from_str</references>
        <referencedby refid="test__device_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__device_8c" startline="55" endline="61">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_cpu_caps</definition>
        <argsstring>(void)</argsstring>
        <name>test_cpu_caps</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify CPU device exposes GEMV capability. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_device.c" line="24" column="13" bodyfile="tests/c/test_device.c" bodystart="24" bodyend="31"/>
        <references refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" compoundref="ie__device_8h" startline="33">ie_device_caps::has_gemv_f32</references>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" compoundref="ie__device_8h" startline="19">IE_DEV_CPU</references>
        <references refid="ie__device_8h_1aa55efab6527903fcc61f787ebc05c1e3" compoundref="ie__device__common_8c" startline="426" endline="429">ie_device_caps</references>
        <references refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</references>
        <references refid="ie__device_8h_1a8f8a88a7dd6a58749275d2f3dea9a0ab" compoundref="ie__device__common_8c" startline="413" endline="417">ie_device_destroy</references>
        <referencedby refid="test__device_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__device_8c" startline="55" endline="61">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_gpu_fallback</definition>
        <argsstring>(void)</argsstring>
        <name>test_gpu_fallback</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Ensure GPU request gracefully falls back to a working GEMV. </para>
        </briefdescription>
        <detaileddescription>
<para>If CUDA/ZE are unavailable, create() returns a CPU-backed device and gemv completes successfully. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_device.c" line="39" column="13" bodyfile="tests/c/test_device.c" bodystart="39" bodyend="48"/>
        <references refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" compoundref="ie__device_8h" startline="20">IE_DEV_CUDA</references>
        <references refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" compoundref="ie__device__common_8c" startline="377" endline="406">ie_device_create</references>
        <references refid="ie__device_8h_1a8f8a88a7dd6a58749275d2f3dea9a0ab" compoundref="ie__device__common_8c" startline="413" endline="417">ie_device_destroy</references>
        <references refid="ie__device_8h_1af9a99d92974f072775057b5def388b77" compoundref="ie__device__common_8c" startline="444" endline="462">ie_device_gemv_f32</references>
        <referencedby refid="test__device_8c_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="test__device_8c" startline="55" endline="61">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__device_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Test entry point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/c/test_device.c" line="55" column="5" bodyfile="tests/c/test_device.c" bodystart="55" bodyend="61"/>
        <references refid="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" compoundref="test__device_8c" startline="24" endline="31">test_cpu_caps</references>
        <references refid="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" compoundref="test__device_8c" startline="39" endline="48">test_gpu_fallback</references>
        <references refid="test__device_8c_1af2262a71f964197c86339e3797d0c9bb" compoundref="test__device_8c" startline="13" endline="19">test_kind_parse</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Unit tests for <ref refid="structie__device" kindref="compound">ie_device</ref> API (selection and CPU fallback). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ie__device_8h" kindref="compound">ie_device.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="test__device_8c_1af2262a71f964197c86339e3797d0c9bb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__device_8c_1af2262a71f964197c86339e3797d0c9bb" kindref="member">test_kind_parse</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1aab258e9f33c12fc1276783d70b8c75a7" kindref="member">ie_device_kind_from_str</ref>(NULL)<sp/>==<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1aab258e9f33c12fc1276783d70b8c75a7" kindref="member">ie_device_kind_from_str</ref>(</highlight><highlight class="stringliteral">&quot;cpu&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1aab258e9f33c12fc1276783d70b8c75a7" kindref="member">ie_device_kind_from_str</ref>(</highlight><highlight class="stringliteral">&quot;CUDA&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" kindref="member">IE_DEV_CUDA</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1aab258e9f33c12fc1276783d70b8c75a7" kindref="member">ie_device_kind_from_str</ref>(</highlight><highlight class="stringliteral">&quot;ze&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fa3a29450e9feabd789030b167dc34fbd7" kindref="member">IE_DEV_ZE</ref>);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1aab258e9f33c12fc1276783d70b8c75a7" kindref="member">ie_device_kind_from_str</ref>(</highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" kindref="member">test_cpu_caps</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*d<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" kindref="member">ie_device_create</ref>(<ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fae69c547c69799190aba83e121c0986b5" kindref="member">IE_DEV_CPU</ref>,<sp/>&amp;d)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>d);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="ie__device_8h_1aa2d298e25d7b01728fa80d92778822ff" kindref="member">ie_device_caps_t</ref><sp/>caps;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1aa55efab6527903fcc61f787ebc05c1e3" kindref="member">ie_device_caps</ref>(d,<sp/>&amp;caps)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>assert(caps.<ref refid="structie__device__caps_1a5ec80f9e6c45476f63cfb02e14b76996" kindref="member">has_gemv_f32</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="ie__device_8h_1a8f8a88a7dd6a58749275d2f3dea9a0ab" kindref="member">ie_device_destroy</ref>(d);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" kindref="member">test_gpu_fallback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="ie__device_8h_1a7c50deaca4d796966353da1769279628" kindref="member">ie_device_t</ref><sp/>*d<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>assert(<ref refid="ie__device_8h_1a3e42fcc4b9579a9bf14520cb1afe733b" kindref="member">ie_device_create</ref>(<ref refid="ie__device_8h_1ab70318bd3a8798846b5fe0f5f493499fad76933c12c638e9ceb8afb2420154948" kindref="member">IE_DEV_CUDA</ref>,<sp/>&amp;d)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>d);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>W[4]<sp/>=<sp/>{1,2,3,4},<sp/>x[2]<sp/>=<sp/>{1,1},<sp/>y[2]<sp/>=<sp/>{0,0};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/><ref refid="ie__device_8h_1af9a99d92974f072775057b5def388b77" kindref="member">ie_device_gemv_f32</ref>(d,<sp/>W,<sp/>x,<sp/>y,<sp/>2,<sp/>2,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>assert(rc<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>assert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(y[0]<sp/>+<sp/>1e-4f)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>assert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(y[1]<sp/>+<sp/>1e-4f)<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="ie__device_8h_1a8f8a88a7dd6a58749275d2f3dea9a0ab" kindref="member">ie_device_destroy</ref>(d);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="test__device_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__device_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="test__device_8c_1af2262a71f964197c86339e3797d0c9bb" kindref="member">test_kind_parse</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="test__device_8c_1a7b62f3db43117555c60ec59d19c7c8d6" kindref="member">test_cpu_caps</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="test__device_8c_1a548e6227513ac3fd772219dad3b0de22" kindref="member">test_gpu_fallback</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;ok<sp/>test_device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/c/test_device.c"/>
  </compounddef>
</doxygen>
