/* ========================================================================== */
/* File: engine/include/ie_kv_instrumentation.h                               */
/* ========================================================================== */
/**
 * @file ie_kv_instrumentation.h
 * @brief Lightweight KV cache hit/miss instrumentation for benchmarks.
 *
 * This module provides a very small, header-only friendly API used by the CLI
 * and by the engine core to count "KV cache" hits and misses during generation.
 *
 * ### Model and intent
 * - We model the KV as a fixed-capacity FIFO set of 32-bit token IDs.
 * - A token is a **hit** if it is already present in the set; otherwise it's a
 *   **miss**, and the token is inserted (evicting the oldest when full).
 * - Capacity is per-process/round (i.e., per benchmark invocation).
 *
 * ### Lifecycle
 * - Call ::ie_kv_begin_round() exactly once before the first token of a round.
 * - For each produced token, call ::ie_kv_on_token().
 * - At the end, call ::ie_kv_finish_round() to obtain the counters and release
 *   internal buffers.
 *
 * The implementation is intentionally simple (single-threaded), deterministic,
 * and has O(capacity) membership checks. This is sufficient to give meaningful
 * hit/miss ratios for benchmarking without pulling complex dependencies.
 */

#ifndef IE_KV_INSTRUMENTATION_H
#define IE_KV_INSTRUMENTATION_H

#include <stdint.h>
#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Initialize KV counters and allocate a token set for the round.
 *
 * Capacity is read from the environment variable `IE_KV_CAP` if present;
 * otherwise a default capacity of 4096 tokens is used. Passing this function
 * multiple times resets the state (counters and set) for a new round.
 *
 * @return 0 on success; non-zero on allocation failure.
 */
int ie_kv_begin_round(void);

/**
 * @brief Report a produced token to the KV tracker.
 *
 * If the token is already present in the FIFO set, this increments the @b hit
 * counter. Otherwise it increments @b miss and inserts the token (evicting the
 * oldest element when the set is full).
 *
 * @param token 32-bit token identifier generated by the model.
 */
void ie_kv_on_token(uint32_t token);

/**
 * @brief Finalize the round and return hit/miss counters.
 *
 * If no tokens were reported (counters are both zero) but @p total_tokens is
 * non-zero, this function conservatively assumes all tokens were @b misses.
 *
 * This call also frees any internal buffers allocated by ::ie_kv_begin_round().
 *
 * @param total_tokens Total tokens generated in the round (for fallback).
 * @param out_hits     Output: total hit count (non-NULL).
 * @param out_misses   Output: total miss count (non-NULL).
 */
void ie_kv_finish_round(uint64_t total_tokens,
                        uint64_t *out_hits,
                        uint64_t *out_misses);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* IE_KV_INSTRUMENTATION_H */
/* ========================================================================== */
/* End of file                                                                */
/* ========================================================================== */
