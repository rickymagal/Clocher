"""
Harness smoke tests (stdlib-only).

This test runs the benchmark harness as a subprocess to avoid importing it
as a package (no third-party deps, no __init__.py required). It then checks
that a new report directory with summary.json was created.
"""

import json
import subprocess
import time
import unittest
from pathlib import Path


class HarnessTests(unittest.TestCase):
    def setUp(self):
        self.repo_root = Path(__file__).resolve().parents[2]
        self.bin_path = self.repo_root / "build" / "inference-engine"
        self.reports_dir = self.repo_root / "benchmarks" / "reports"
        self.harness_script = self.repo_root / "benchmarks" / "harness.py"

    def test_harness_generates_reports(self):
        # Preconditions
        self.assertTrue(self.bin_path.exists(), msg="Binary not found. Run: make build")
        self.assertTrue(self.harness_script.exists(), msg="Missing benchmarks/harness.py")

        # Run harness (writes to benchmarks/reports/<timestamp>/)
        cp = subprocess.run(
            ["python3", str(self.harness_script)],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        # Allow filesystem timestamp granularity
        time.sleep(0.05)

        # Find most recent summary.json
        candidates = sorted(self.reports_dir.glob("*/summary.json"))
        self.assertTrue(candidates, msg="No summary.json generated by harness")
        summary_path = candidates[-1]

        # Validate summary structure
        data = json.loads(summary_path.read_text(encoding="utf-8"))
        for key in ("avg_tps_true", "total_tokens", "samples"):
            self.assertIn(key, data, msg=f"Missing summary field: {key}")
        self.assertGreater(data["samples"], 0)
        self.assertGreaterEqual(data["total_tokens"], 0)


if __name__ == "__main__":
    unittest.main(verbosity=2)
